// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: .dockerignore 1`] = `
"*
!target/*-runner
!target/*-runner.jar
!target/lib/*
!target/quarkus-app/*"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: .gitignore 1`] = `
"#Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
release.properties
.flattened-pom.xml

# Eclipse
.project
.classpath
.settings/
bin/

# IntelliJ
.idea
*.ipr
*.iml
*.iws

# NetBeans
nb-configuration.xml

# Visual Studio Code
.vscode
.factorypath

# OSX
.DS_Store

# Vim
*.swp
*.swo

# patch
*.orig
*.rej

# Local environment
.env

# Plugin directory
/.quarkus/cli/plugins/
# TLS Certificates
.certs/
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: .gitignore 2`] = `
"maven-wrapper.jar
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: AdeoAsyncAPICaseStudyResource.java 1`] = `
"//////////////////////////////////////////////////
//
// Adeo AsyncAPI Case Study - %REPLACED_BY_MAVEN%
// Protocol: kafka-secure
// Host: prod.url:9092
//
//////////////////////////////////////////////////

package com.asyncapi;

import jakarta.inject.Inject;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.eclipse.microprofile.reactive.messaging.Channel;
import org.eclipse.microprofile.reactive.messaging.Emitter;
import org.eclipse.microprofile.reactive.messaging.Incoming;
import org.eclipse.microprofile.reactive.messaging.Message;
import io.smallrye.reactive.messaging.kafka.Record;
import io.smallrye.reactive.messaging.kafka.KafkaRecord;

@Path(\\"/\\")  
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class AdeoAsyncAPICaseStudyResource{


    @Inject
    CostingResponseProducer producer;


    @Inject
    @Channel(\\"middle-out\\")
    Emitter<String> middleEmitter;

    // Modify DTO for BL
    public static class DTO{
        public String id;
        public String value;
    }


    /**
     *  Simple rest endpoint to simulate the event production
     * */
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public Response produceEvent(DTO request) {
        // Logic to produce an event to Kafka
        System.out.println(\\">>> Raw body: \\" + request);

        if (request == null) {
            System.out.println(\\"Request is null - no body provided\\");
            return Response.status(Response.Status.BAD_REQUEST).entity(\\"Request body is required\\").build();
        }

        String returnedID = (request.id != null) ? request.id : \\"\\";
        String returnedValue = (request.value != null) ? request.value : \\"\\";

        System.out.printf(\\"Sending request: id=%s, value=%s%n\\", returnedID, returnedValue);

        producer.sendCostingResponseProducer(returnedID, returnedValue);
        

        return Response.accepted().build();
    }

    @Incoming(\\"middle-in\\")
    public String relayEvent(Record<String, String> record) {
        String key = null;
        try {
            Thread.sleep(1000); // simulate some work
        
            key = record.key();
            String value = record.value();
            System.out.printf(\\"Middle service received: key=%s, value=%s%n\\", key, value);

            value = value + \\" - processed by middle service\\";

            Message<String> message = KafkaRecord.of(key, value);
            middleEmitter.send(message);

            return key;
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            System.out.println(\\"Thread was interrupted: \\" + e.getMessage());
        }

        return key;
        
    }


}



"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: AnonymousSchema_18.java 1`] = `
"package com.asyncapi.models;

public enum AnonymousSchema_18 {
  FT20((String)\\"FT20\\"), FT40((String)\\"FT40\\"), FT40_HC((String)\\"FT40HC\\"), TRUCK((String)\\"TRUCK\\");

  private final String value;

  AnonymousSchema_18(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  public static AnonymousSchema_18 fromValue(String value) {
    for (AnonymousSchema_18 e : AnonymousSchema_18.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: AnonymousSchema_25.java 1`] = `
"package com.asyncapi.models;

/**
 * AnonymousSchema_25 represents a union of types: ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultItem
 */
public interface AnonymousSchema_25 {
  
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: AnonymousSchema_27.java 1`] = `
"package com.asyncapi.models;

public enum AnonymousSchema_27 {
  USD((String)\\"USD\\"), EUR((String)\\"EUR\\"), CNY((String)\\"CNY\\");

  private final String value;

  AnonymousSchema_27(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  public static AnonymousSchema_27 fromValue(String value) {
    for (AnonymousSchema_27 e : AnonymousSchema_27.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: AnonymousSchema_35.java 1`] = `
"package com.asyncapi.models;

public enum AnonymousSchema_35 {
  TECHNICAL((String)\\"TECHNICAL\\"), FUNCTIONAL((String)\\"FUNCTIONAL\\");

  private final String value;

  AnonymousSchema_35(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  public static AnonymousSchema_35 fromValue(String value) {
    for (AnonymousSchema_35 e : AnonymousSchema_35.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestBuItem.java 1`] = `
"package com.asyncapi.models;

import java.util.Objects;
import java.util.Map;

public class ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestBuItem {
  private String clientCode;
  private Object containerType;
  private Map<String, Object> additionalProperties;

  public String getClientCode() { return this.clientCode; }
  public void setClientCode(String clientCode) { this.clientCode = clientCode; }

  public Object getContainerType() { return this.containerType; }
  public void setContainerType(Object containerType) { this.containerType = containerType; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestBuItem self = (ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestBuItem) o;
      return 
        Objects.equals(this.clientCode, self.clientCode) &&
        Objects.equals(this.containerType, self.containerType) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)clientCode, (Object)containerType, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestBuItem {\\\\n\\" +   
      \\"    clientCode: \\" + toIndentedString(clientCode) + \\"\\\\n\\" +
      \\"    containerType: \\" + toIndentedString(containerType) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestPayload.java 1`] = `
"package com.asyncapi.models;

import java.util.Objects;

public class ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestPayload {
  private String productId;
  private Object shortProductDescription;
  private String supplierCode;
  private Float supplierPrice;
  private ComDotAdeoDotCasestudyDotCostingrequestDotUnitItem unit;
  private ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestBuItem[] busInputs;

  public String getProductId() { return this.productId; }
  public void setProductId(String productId) { this.productId = productId; }

  public Object getShortProductDescription() { return this.shortProductDescription; }
  public void setShortProductDescription(Object shortProductDescription) { this.shortProductDescription = shortProductDescription; }

  public String getSupplierCode() { return this.supplierCode; }
  public void setSupplierCode(String supplierCode) { this.supplierCode = supplierCode; }

  public Float getSupplierPrice() { return this.supplierPrice; }
  public void setSupplierPrice(Float supplierPrice) { this.supplierPrice = supplierPrice; }

  public ComDotAdeoDotCasestudyDotCostingrequestDotUnitItem getUnit() { return this.unit; }
  public void setUnit(ComDotAdeoDotCasestudyDotCostingrequestDotUnitItem unit) { this.unit = unit; }

  public ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestBuItem[] getBusInputs() { return this.busInputs; }
  public void setBusInputs(ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestBuItem[] busInputs) { this.busInputs = busInputs; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestPayload self = (ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestPayload) o;
      return 
        Objects.equals(this.productId, self.productId) &&
        Objects.equals(this.shortProductDescription, self.shortProductDescription) &&
        Objects.equals(this.supplierCode, self.supplierCode) &&
        Objects.equals(this.supplierPrice, self.supplierPrice) &&
        Objects.equals(this.unit, self.unit) &&
        Objects.equals(this.busInputs, self.busInputs);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)productId, (Object)shortProductDescription, (Object)supplierCode, (Object)supplierPrice, (Object)unit, (Object)busInputs);
  }

  @Override
  public String toString() {
    return \\"class ComDotAdeoDotCasestudyDotCostingrequestDotCostingRequestPayload {\\\\n\\" +   
      \\"    productId: \\" + toIndentedString(productId) + \\"\\\\n\\" +
      \\"    shortProductDescription: \\" + toIndentedString(shortProductDescription) + \\"\\\\n\\" +
      \\"    supplierCode: \\" + toIndentedString(supplierCode) + \\"\\\\n\\" +
      \\"    supplierPrice: \\" + toIndentedString(supplierPrice) + \\"\\\\n\\" +
      \\"    unit: \\" + toIndentedString(unit) + \\"\\\\n\\" +
      \\"    busInputs: \\" + toIndentedString(busInputs) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: ComDotAdeoDotCasestudyDotCostingrequestDotUnitItem.java 1`] = `
"package com.asyncapi.models;

import java.util.Objects;
import java.util.Map;

public class ComDotAdeoDotCasestudyDotCostingrequestDotUnitItem {
  private float length;
  private float width;
  private float height;
  private float weightGross;
  private float weightNet;
  private Map<String, Object> additionalProperties;

  public float getLength() { return this.length; }
  public void setLength(float length) { this.length = length; }

  public float getWidth() { return this.width; }
  public void setWidth(float width) { this.width = width; }

  public float getHeight() { return this.height; }
  public void setHeight(float height) { this.height = height; }

  public float getWeightGross() { return this.weightGross; }
  public void setWeightGross(float weightGross) { this.weightGross = weightGross; }

  public float getWeightNet() { return this.weightNet; }
  public void setWeightNet(float weightNet) { this.weightNet = weightNet; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComDotAdeoDotCasestudyDotCostingrequestDotUnitItem self = (ComDotAdeoDotCasestudyDotCostingrequestDotUnitItem) o;
      return 
        Objects.equals(this.length, self.length) &&
        Objects.equals(this.width, self.width) &&
        Objects.equals(this.height, self.height) &&
        Objects.equals(this.weightGross, self.weightGross) &&
        Objects.equals(this.weightNet, self.weightNet) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)length, (Object)width, (Object)height, (Object)weightGross, (Object)weightNet, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class ComDotAdeoDotCasestudyDotCostingrequestDotUnitItem {\\\\n\\" +   
      \\"    length: \\" + toIndentedString(length) + \\"\\\\n\\" +
      \\"    width: \\" + toIndentedString(width) + \\"\\\\n\\" +
      \\"    height: \\" + toIndentedString(height) + \\"\\\\n\\" +
      \\"    weightGross: \\" + toIndentedString(weightGross) + \\"\\\\n\\" +
      \\"    weightNet: \\" + toIndentedString(weightNet) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: ComDotAdeoDotCasestudyDotCostingresponseDotCostingErrorItem.java 1`] = `
"package com.asyncapi.models;

import java.util.Objects;
import java.util.Map;

public class ComDotAdeoDotCasestudyDotCostingresponseDotCostingErrorItem {
  private AnonymousSchema_35 type;
  private String code;
  private String step;
  private String description;
  private Map<String, Object> additionalProperties;

  public AnonymousSchema_35 getType() { return this.type; }
  public void setType(AnonymousSchema_35 type) { this.type = type; }

  public String getCode() { return this.code; }
  public void setCode(String code) { this.code = code; }

  public String getStep() { return this.step; }
  public void setStep(String step) { this.step = step; }

  public String getDescription() { return this.description; }
  public void setDescription(String description) { this.description = description; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComDotAdeoDotCasestudyDotCostingresponseDotCostingErrorItem self = (ComDotAdeoDotCasestudyDotCostingresponseDotCostingErrorItem) o;
      return 
        Objects.equals(this.type, self.type) &&
        Objects.equals(this.code, self.code) &&
        Objects.equals(this.step, self.step) &&
        Objects.equals(this.description, self.description) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)type, (Object)code, (Object)step, (Object)description, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class ComDotAdeoDotCasestudyDotCostingresponseDotCostingErrorItem {\\\\n\\" +   
      \\"    type: \\" + toIndentedString(type) + \\"\\\\n\\" +
      \\"    code: \\" + toIndentedString(code) + \\"\\\\n\\" +
      \\"    step: \\" + toIndentedString(step) + \\"\\\\n\\" +
      \\"    description: \\" + toIndentedString(description) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: ComDotAdeoDotCasestudyDotCostingresponseDotCostingResponsePayload.java 1`] = `
"package com.asyncapi.models;

import java.util.Objects;

public class ComDotAdeoDotCasestudyDotCostingresponseDotCostingResponsePayload {
  private AnonymousSchema_25 costingResult;
  private Object costingErrors;

  public AnonymousSchema_25 getCostingResult() { return this.costingResult; }
  public void setCostingResult(AnonymousSchema_25 costingResult) { this.costingResult = costingResult; }

  public Object getCostingErrors() { return this.costingErrors; }
  public void setCostingErrors(Object costingErrors) { this.costingErrors = costingErrors; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComDotAdeoDotCasestudyDotCostingresponseDotCostingResponsePayload self = (ComDotAdeoDotCasestudyDotCostingresponseDotCostingResponsePayload) o;
      return 
        Objects.equals(this.costingResult, self.costingResult) &&
        Objects.equals(this.costingErrors, self.costingErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)costingResult, (Object)costingErrors);
  }

  @Override
  public String toString() {
    return \\"class ComDotAdeoDotCasestudyDotCostingresponseDotCostingResponsePayload {\\\\n\\" +   
      \\"    costingResult: \\" + toIndentedString(costingResult) + \\"\\\\n\\" +
      \\"    costingErrors: \\" + toIndentedString(costingErrors) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultDetailsItem.java 1`] = `
"package com.asyncapi.models;

import java.util.Objects;
import java.util.Map;

public class ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultDetailsItem {
  private String code;
  private String formula;
  private float value;
  private Map<String, Object> additionalProperties;

  public String getCode() { return this.code; }
  public void setCode(String code) { this.code = code; }

  public String getFormula() { return this.formula; }
  public void setFormula(String formula) { this.formula = formula; }

  public float getValue() { return this.value; }
  public void setValue(float value) { this.value = value; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultDetailsItem self = (ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultDetailsItem) o;
      return 
        Objects.equals(this.code, self.code) &&
        Objects.equals(this.formula, self.formula) &&
        Objects.equals(this.value, self.value) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)code, (Object)formula, (Object)value, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultDetailsItem {\\\\n\\" +   
      \\"    code: \\" + toIndentedString(code) + \\"\\\\n\\" +
      \\"    formula: \\" + toIndentedString(formula) + \\"\\\\n\\" +
      \\"    value: \\" + toIndentedString(value) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultItem.java 1`] = `
"package com.asyncapi.models;

import java.util.Objects;
import java.util.Map;

public class ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultItem implements AnonymousSchema_25 {
  private float calculationPrice;
  private AnonymousSchema_27 calculationCurrency;
  private ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultDetailsItem[] calculationDetails;
  private Map<String, Object> additionalProperties;

  public float getCalculationPrice() { return this.calculationPrice; }
  public void setCalculationPrice(float calculationPrice) { this.calculationPrice = calculationPrice; }

  public AnonymousSchema_27 getCalculationCurrency() { return this.calculationCurrency; }
  public void setCalculationCurrency(AnonymousSchema_27 calculationCurrency) { this.calculationCurrency = calculationCurrency; }

  public ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultDetailsItem[] getCalculationDetails() { return this.calculationDetails; }
  public void setCalculationDetails(ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultDetailsItem[] calculationDetails) { this.calculationDetails = calculationDetails; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultItem self = (ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultItem) o;
      return 
        Objects.equals(this.calculationPrice, self.calculationPrice) &&
        Objects.equals(this.calculationCurrency, self.calculationCurrency) &&
        Objects.equals(this.calculationDetails, self.calculationDetails) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)calculationPrice, (Object)calculationCurrency, (Object)calculationDetails, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class ComDotAdeoDotCasestudyDotCostingresponseDotCostingResultItem {\\\\n\\" +   
      \\"    calculationPrice: \\" + toIndentedString(calculationPrice) + \\"\\\\n\\" +
      \\"    calculationCurrency: \\" + toIndentedString(calculationCurrency) + \\"\\\\n\\" +
      \\"    calculationDetails: \\" + toIndentedString(calculationDetails) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: CostingRequestConsumer.java 1`] = `
"package com.asyncapi;

import io.smallrye.reactive.messaging.kafka.Record;
import org.eclipse.microprofile.reactive.messaging.Incoming;
import org.jboss.logging.Logger;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped  
public class CostingRequestConsumer{

  private static final Logger logger = Logger.getLogger(CostingRequestConsumer.class);

      @Incoming(\\"consumer-channel\\") 
      public void consumeCostingRequest(Record<String, String> record) {
        logger.infof(\\"Got an event, id: %s value: %s\\", record.key(), record.value());
            
        // TODO: Add your business logic here for events
        // - Parse the response payload using your generated models
      }
  }



"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: CostingResponseProducer.java 1`] = `
"package com.asyncapi;

import io.smallrye.reactive.messaging.kafka.KafkaRecord;
import org.eclipse.microprofile.reactive.messaging.Channel;
import org.eclipse.microprofile.reactive.messaging.Emitter;
import org.jboss.logging.Logger;
import org.eclipse.microprofile.reactive.messaging.Message;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import java.util.UUID;

@ApplicationScoped  
public class CostingResponseProducer{


    private static final Logger logger = Logger.getLogger(CostingResponseProducer.class);

    @Inject 
    @Channel(\\"producer-channel\\")
    Emitter<String> costingResponseProducerEmitter;


    public String sendCostingResponseProducer(String requestId, String value) {
      try{
          // Generate requestId if null
          if (requestId == null || requestId.trim().isEmpty()) {
              requestId = UUID.randomUUID().toString();
          }     
          
          if(value == null || value.trim().isEmpty()) {
              value = \\"ASYNCAPI - TEST\\";
          }
          Message<String> message = KafkaRecord.of(requestId, value);
          costingResponseProducerEmitter.send(message);
          logger.infof(\\"Sent costing request with ID: %s and value: %s\\", requestId, value);
      }catch (Exception e) {
          throw new RuntimeException(String.format(\\"Failed to produce event: %s\\", e.getMessage()));
      }


      return requestId;
    }
}



"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: Dockerfile.jvm 1`] = `
"####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the container image run:
#
# ./mvnw package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/quarkus-kafka-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/quarkus-kafka-jvm
#
# If you want to include the debug port into your docker image
# you will have to expose the debug port (default 5005 being the default) like this :  EXPOSE 8080 5005.
# Additionally you will have to set -e JAVA_DEBUG=true and -e JAVA_DEBUG_PORT=*:5005
# when running the container
#
# Then run the container using :
#
# docker run -i --rm -p 8080:8080 quarkus/quarkus-kafka-jvm
#
# This image uses the \`run-java.sh\` script to run the application.
# This scripts computes the command line to execute your Java application, and
# includes memory/GC tuning.
# You can configure the behavior using the following environment properties:
# - JAVA_OPTS: JVM options passed to the \`java\` command (example: \\"-verbose:class\\") - Be aware that this will override
# the default JVM options, use \`JAVA_OPTS_APPEND\` to append options
# - JAVA_OPTS_APPEND: User specified Java options to be appended to generated options
#   in JAVA_OPTS (example: \\"-Dsome.property=foo\\")
# - JAVA_MAX_MEM_RATIO: Is used when no \`-Xmx\` option is given in JAVA_OPTS. This is
#   used to calculate a default maximal heap memory based on a containers restriction.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then \`-Xmx\` is set to a ratio
#   of the container available memory as set here. The default is \`50\` which means 50%
#   of the available memory is used as an upper boundary. You can skip this mechanism by
#   setting this value to \`0\` in which case no \`-Xmx\` option is added.
# - JAVA_INITIAL_MEM_RATIO: Is used when no \`-Xms\` option is given in JAVA_OPTS. This
#   is used to calculate a default initial heap memory based on the maximum heap memory.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then \`-Xms\` is set to a ratio
#   of the \`-Xmx\` memory as set here. The default is \`25\` which means 25% of the \`-Xmx\`
#   is used as the initial heap size. You can skip this mechanism by setting this value
#   to \`0\` in which case no \`-Xms\` option is added (example: \\"25\\")
# - JAVA_MAX_INITIAL_MEM: Is used when no \`-Xms\` option is given in JAVA_OPTS.
#   This is used to calculate the maximum value of the initial heap memory. If used in
#   a container without any memory constraints for the container then this option has
#   no effect. If there is a memory constraint then \`-Xms\` is limited to the value set
#   here. The default is 4096MB which means the calculated value of \`-Xms\` never will
#   be greater than 4096MB. The value of this variable is expressed in MB (example: \\"4096\\")
# - JAVA_DIAGNOSTICS: Set this to get some diagnostics information to standard output
#   when things are happening. This option, if set to true, will set
#  \`-XX:+UnlockDiagnosticVMOptions\`. Disabled by default (example: \\"true\\").
# - JAVA_DEBUG: If set remote debugging will be switched on. Disabled by default (example:
#    true\\").
# - JAVA_DEBUG_PORT: Port used for remote debugging. Defaults to 5005 (example: \\"8787\\").
# - CONTAINER_CORE_LIMIT: A calculated core limit as described in
#   https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt. (example: \\"2\\")
# - CONTAINER_MAX_MEMORY: Memory limit given to the container (example: \\"1024\\").
# - GC_MIN_HEAP_FREE_RATIO: Minimum percentage of heap free after GC to avoid expansion.
#   (example: \\"20\\")
# - GC_MAX_HEAP_FREE_RATIO: Maximum percentage of heap free after GC to avoid shrinking.
#   (example: \\"40\\")
# - GC_TIME_RATIO: Specifies the ratio of the time spent outside the garbage collection.
#   (example: \\"4\\")
# - GC_ADAPTIVE_SIZE_POLICY_WEIGHT: The weighting given to the current GC time versus
#   previous GC times. (example: \\"90\\")
# - GC_METASPACE_SIZE: The initial metaspace size. (example: \\"20\\")
# - GC_MAX_METASPACE_SIZE: The maximum metaspace size. (example: \\"100\\")
# - GC_CONTAINER_OPTIONS: Specify Java GC to use. The value of this variable should
#   contain the necessary JRE command-line options to specify the required GC, which
#   will override the default of \`-XX:+UseParallelGC\` (example: -XX:+UseG1GC).
# - HTTPS_PROXY: The location of the https proxy. (example: \\"myuser@127.0.0.1:8080\\")
# - HTTP_PROXY: The location of the http proxy. (example: \\"myuser@127.0.0.1:8080\\")
# - NO_PROXY: A comma separated lists of hosts, IP addresses or domains that can be
#   accessed directly. (example: \\"foo.example.com,bar.example.com\\")
#
###
FROM registry.access.redhat.com/ubi9/openjdk-21:1.21

ENV LANGUAGE='en_US:en'


# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=185 target/quarkus-app/*.jar /deployments/
COPY --chown=185 target/quarkus-app/app/ /deployments/app/
COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 185
ENV JAVA_OPTS_APPEND=\\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\\"
ENV JAVA_APP_JAR=\\"/deployments/quarkus-run.jar\\"

ENTRYPOINT [ \\"/opt/jboss/container/java/run/run-java.sh\\" ]

"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: MavenWrapperDownloader.java 1`] = `
"/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * \\"License\\"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.IOException;
import java.io.InputStream;
import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.net.URI;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.concurrent.ThreadLocalRandom;

public final class MavenWrapperDownloader {
    private static final String WRAPPER_VERSION = \\"3.3.2\\";

    private static final boolean VERBOSE = Boolean.parseBoolean(System.getenv(\\"MVNW_VERBOSE\\"));

    public static void main(String[] args) {
        log(\\"Apache Maven Wrapper Downloader \\" + WRAPPER_VERSION);

        if (args.length != 2) {
            System.err.println(\\" - ERROR wrapperUrl or wrapperJarPath parameter missing\\");
            System.exit(1);
        }

        try {
            log(\\" - Downloader started\\");
            final URL wrapperUrl = URI.create(args[0]).toURL();
            final String jarPath = args[1].replace(\\"..\\", \\"\\"); // Sanitize path
            final Path wrapperJarPath = Paths.get(jarPath).toAbsolutePath().normalize();
            downloadFileFromURL(wrapperUrl, wrapperJarPath);
            log(\\"Done\\");
        } catch (IOException e) {
            System.err.println(\\"- Error downloading: \\" + e.getMessage());
            if (VERBOSE) {
                e.printStackTrace();
            }
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(URL wrapperUrl, Path wrapperJarPath)
            throws IOException {
        log(\\" - Downloading to: \\" + wrapperJarPath);
        if (System.getenv(\\"MVNW_USERNAME\\") != null && System.getenv(\\"MVNW_PASSWORD\\") != null) {
            final String username = System.getenv(\\"MVNW_USERNAME\\");
            final char[] password = System.getenv(\\"MVNW_PASSWORD\\").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        Path temp = wrapperJarPath
                .getParent()
                .resolve(wrapperJarPath.getFileName() + \\".\\"
                        + Long.toUnsignedString(ThreadLocalRandom.current().nextLong()) + \\".tmp\\");
        try (InputStream inStream = wrapperUrl.openStream()) {
            Files.copy(inStream, temp, StandardCopyOption.REPLACE_EXISTING);
            Files.move(temp, wrapperJarPath, StandardCopyOption.REPLACE_EXISTING);
        } finally {
            Files.deleteIfExists(temp);
        }
        log(\\" - Downloader complete\\");
    }

    private static void log(String msg) {
        if (VERBOSE) {
            System.out.println(msg);
        }
    }

}
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: README.md 1`] = `
"# quarkus-kafka

This project uses Quarkus, the Supersonic Subatomic Java Framework.

If you want to learn more about Quarkus, please visit its website: <https://quarkus.io/>.

## Running the application in dev mode

You can run your application in dev mode that enables live coding using:

\`\`\`shell script
./mvnw quarkus:dev
\`\`\`

> **_NOTE:_**  Quarkus now ships with a Dev UI, which is available in dev mode only at <http://localhost:8080/q/dev/>.

## Packaging and running the application

The application can be packaged using:

\`\`\`shell script
./mvnw package
\`\`\`

It produces the \`quarkus-run.jar\` file in the \`target/quarkus-app/\` directory.
Be aware that it’s not an _über-jar_ as the dependencies are copied into the \`target/quarkus-app/lib/\` directory.

The application is now runnable using \`java -jar target/quarkus-app/quarkus-run.jar\`.

If you want to build an _über-jar_, execute the following command:

\`\`\`shell script
./mvnw package -Dquarkus.package.jar.type=uber-jar
\`\`\`

The application, packaged as an _über-jar_, is now runnable using \`java -jar target/*-runner.jar\`.

## Creating a native executable

You can create a native executable using:

\`\`\`shell script
./mvnw package -Dnative
\`\`\`

Or, if you don't have GraalVM installed, you can run the native executable build in a container using:

\`\`\`shell script
./mvnw package -Dnative -Dquarkus.native.container-build=true
\`\`\`

You can then execute your native executable with: \`./target/quarkus-kafka-1.0.0-SNAPSHOT-runner\`

If you want to learn more about building native executables, please consult <https://quarkus.io/guides/maven-tooling>.

## Related Guides

- REST Jackson ([guide](https://quarkus.io/guides/rest#json-serialisation)): Jackson serialization support for Quarkus REST. This extension is not compatible with the quarkus-resteasy extension, or any of the extensions that depend on it
- Messaging - Kafka Connector ([guide](https://quarkus.io/guides/kafka-getting-started)): Connect to Kafka with Reactive Messaging
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: application.properties 1`] = `
"
# application.properties

# Kafka broker configuration
kafka.bootstrap.servers=localhost:9092

# Configure outgoing channel for costing requests  (writing to Kafka) - producer
mp.messaging.outgoing.producer-channel.connector=smallrye-kafka
mp.messaging.outgoing.producer-channel.topic=adeo-dev-case-study-COSTING-RESPONSE-V1
mp.messaging.outgoing.producer-channel.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.producer-channel.value.serializer=org.apache.kafka.common.serialization.StringSerializer


# Configure incoming channel for costing responses (reading from Kafka) - consumer
mp.messaging.incoming.consumer-channel.connector=smallrye-kafka
mp.messaging.incoming.consumer-channel.topic=adeo-dev-case-study-COSTING-REQUEST-V1
mp.messaging.incoming.consumer-channel.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.consumer-channel.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer


# Incoming: read from producer's topic
mp.messaging.incoming.middle-in.connector=smallrye-kafka
mp.messaging.incoming.middle-in.topic=adeo-dev-case-study-COSTING-RESPONSE-V1
mp.messaging.incoming.middle-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.middle-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Outgoing: write to consumer's topic
mp.messaging.outgoing.middle-out.connector=smallrye-kafka
mp.messaging.outgoing.middle-out.topic=adeo-dev-case-study-COSTING-REQUEST-V1
mp.messaging.outgoing.middle-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.middle-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer

"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: docker-compose.yaml 1`] = `
"version: '3'
services:
  zookeeper:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command: [
      \\"sh\\", \\"-c\\",
      \\"bin/zookeeper-server-start.sh config/zookeeper.properties\\"
    ]
    ports:
      - \\"2181:2181\\"
    environment:
      LOG_DIR: /tmp/logs

  kafka:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command: [
      \\"sh\\", \\"-c\\",
      \\"bin/kafka-server-start.sh config/server.properties --override listeners=$\${KAFKA_LISTENERS} --override advertised.listeners=$\${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$\${KAFKA_ZOOKEEPER_CONNECT}\\"
    ]
    depends_on:
      - zookeeper
    ports:
      - \\"9092:9092\\"
    environment:
      LOG_DIR: \\"/tmp/logs\\"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: maven-wrapper.properties 1`] = `
"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \\"License\\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=source
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: mvnw 1`] = `
"#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \\"License\\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z \\"$MAVEN_SKIP_RC\\" ]; then

  if [ -f /usr/local/etc/mavenrc ]; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ]; then
    . /etc/mavenrc
  fi

  if [ -f \\"$HOME/.mavenrc\\" ]; then
    . \\"$HOME/.mavenrc\\"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false
darwin=false
mingw=false
case \\"$(uname)\\" in
CYGWIN*) cygwin=true ;;
MINGW*) mingw=true ;;
Darwin*)
  darwin=true
  # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
  # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
  if [ -z \\"$JAVA_HOME\\" ]; then
    if [ -x \\"/usr/libexec/java_home\\" ]; then
      JAVA_HOME=\\"$(/usr/libexec/java_home)\\"
      export JAVA_HOME
    else
      JAVA_HOME=\\"/Library/Java/Home\\"
      export JAVA_HOME
    fi
  fi
  ;;
esac

if [ -z \\"$JAVA_HOME\\" ]; then
  if [ -r /etc/gentoo-release ]; then
    JAVA_HOME=$(java-config --jre-home)
  fi
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin; then
  [ -n \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=$(cygpath --unix \\"$JAVA_HOME\\")
  [ -n \\"$CLASSPATH\\" ] \\\\
    && CLASSPATH=$(cygpath --path --unix \\"$CLASSPATH\\")
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw; then
  [ -n \\"$JAVA_HOME\\" ] && [ -d \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=\\"$(
      cd \\"$JAVA_HOME\\" || (
        echo \\"cannot cd into $JAVA_HOME.\\" >&2
        exit 1
      )
      pwd
    )\\"
fi

if [ -z \\"$JAVA_HOME\\" ]; then
  javaExecutable=\\"$(which javac)\\"
  if [ -n \\"$javaExecutable\\" ] && ! [ \\"$(expr \\"$javaExecutable\\" : '\\\\([^ ]*\\\\)')\\" = \\"no\\" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=$(which readlink)
    if [ ! \\"$(expr \\"$readLink\\" : '\\\\([^ ]*\\\\)')\\" = \\"no\\" ]; then
      if $darwin; then
        javaHome=\\"$(dirname \\"$javaExecutable\\")\\"
        javaExecutable=\\"$(cd \\"$javaHome\\" && pwd -P)/javac\\"
      else
        javaExecutable=\\"$(readlink -f \\"$javaExecutable\\")\\"
      fi
      javaHome=\\"$(dirname \\"$javaExecutable\\")\\"
      javaHome=$(expr \\"$javaHome\\" : '\\\\(.*\\\\)/bin')
      JAVA_HOME=\\"$javaHome\\"
      export JAVA_HOME
    fi
  fi
fi

if [ -z \\"$JAVACMD\\" ]; then
  if [ -n \\"$JAVA_HOME\\" ]; then
    if [ -x \\"$JAVA_HOME/jre/sh/java\\" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD=\\"$JAVA_HOME/jre/sh/java\\"
    else
      JAVACMD=\\"$JAVA_HOME/bin/java\\"
    fi
  else
    JAVACMD=\\"$(
      \\\\unset -f command 2>/dev/null
      \\\\command -v java
    )\\"
  fi
fi

if [ ! -x \\"$JAVACMD\\" ]; then
  echo \\"Error: JAVA_HOME is not defined correctly.\\" >&2
  echo \\"  We cannot execute $JAVACMD\\" >&2
  exit 1
fi

if [ -z \\"$JAVA_HOME\\" ]; then
  echo \\"Warning: JAVA_HOME environment variable is not set.\\" >&2
fi

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {
  if [ -z \\"$1\\" ]; then
    echo \\"Path not specified to find_maven_basedir\\" >&2
    return 1
  fi

  basedir=\\"$1\\"
  wdir=\\"$1\\"
  while [ \\"$wdir\\" != '/' ]; do
    if [ -d \\"$wdir\\"/.mvn ]; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d \\"\${wdir}\\" ]; then
      wdir=$(
        cd \\"$wdir/..\\" || exit 1
        pwd
      )
    fi
    # end of workaround
  done
  printf '%s' \\"$(
    cd \\"$basedir\\" || exit 1
    pwd
  )\\"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f \\"$1\\" ]; then
    # Remove \\\\r in case we run on Windows within Git Bash
    # and check out the repository with auto CRLF management
    # enabled. Otherwise, we may read lines that are delimited with
    # \\\\r\\\\n and produce $'-Xarg\\\\r' rather than -Xarg due to word
    # splitting rules.
    tr -s '\\\\r\\\\n' ' ' <\\"$1\\"
  fi
}

log() {
  if [ \\"$MVNW_VERBOSE\\" = true ]; then
    printf '%s\\\\n' \\"$1\\"
  fi
}

BASE_DIR=$(find_maven_basedir \\"$(dirname \\"$0\\")\\")
if [ -z \\"$BASE_DIR\\" ]; then
  exit 1
fi

MAVEN_PROJECTBASEDIR=\${MAVEN_BASEDIR:-\\"$BASE_DIR\\"}
export MAVEN_PROJECTBASEDIR
log \\"$MAVEN_PROJECTBASEDIR\\"

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
wrapperJarPath=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\\"
if [ -r \\"$wrapperJarPath\\" ]; then
  log \\"Found $wrapperJarPath\\"
else
  log \\"Couldn't find $wrapperJarPath, downloading it ...\\"

  if [ -n \\"$MVNW_REPOURL\\" ]; then
    wrapperUrl=\\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
  else
    wrapperUrl=\\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
  fi
  while IFS=\\"=\\" read -r key value; do
    # Remove '\\\\r' from value to allow usage on windows as IFS does not consider '\\\\r' as a separator ( considers space, tab, new line ('\\\\n'), and custom '=' )
    safeValue=$(echo \\"$value\\" | tr -d '\\\\r')
    case \\"$key\\" in wrapperUrl)
      wrapperUrl=\\"$safeValue\\"
      break
      ;;
    esac
  done <\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\\"
  log \\"Downloading from: $wrapperUrl\\"

  if $cygwin; then
    wrapperJarPath=$(cygpath --path --windows \\"$wrapperJarPath\\")
  fi

  if command -v wget >/dev/null; then
    log \\"Found wget ... using wget\\"
    [ \\"$MVNW_VERBOSE\\" = true ] && QUIET=\\"\\" || QUIET=\\"--quiet\\"
    if [ -z \\"$MVNW_USERNAME\\" ] || [ -z \\"$MVNW_PASSWORD\\" ]; then
      wget $QUIET \\"$wrapperUrl\\" -O \\"$wrapperJarPath\\" || rm -f \\"$wrapperJarPath\\"
    else
      wget $QUIET --http-user=\\"$MVNW_USERNAME\\" --http-password=\\"$MVNW_PASSWORD\\" \\"$wrapperUrl\\" -O \\"$wrapperJarPath\\" || rm -f \\"$wrapperJarPath\\"
    fi
  elif command -v curl >/dev/null; then
    log \\"Found curl ... using curl\\"
    [ \\"$MVNW_VERBOSE\\" = true ] && QUIET=\\"\\" || QUIET=\\"--silent\\"
    if [ -z \\"$MVNW_USERNAME\\" ] || [ -z \\"$MVNW_PASSWORD\\" ]; then
      curl $QUIET -o \\"$wrapperJarPath\\" \\"$wrapperUrl\\" -f -L || rm -f \\"$wrapperJarPath\\"
    else
      curl $QUIET --user \\"$MVNW_USERNAME:$MVNW_PASSWORD\\" -o \\"$wrapperJarPath\\" \\"$wrapperUrl\\" -f -L || rm -f \\"$wrapperJarPath\\"
    fi
  else
    log \\"Falling back to using Java to download\\"
    javaSource=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java\\"
    javaClass=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class\\"
    # For Cygwin, switch paths to Windows format before running javac
    if $cygwin; then
      javaSource=$(cygpath --path --windows \\"$javaSource\\")
      javaClass=$(cygpath --path --windows \\"$javaClass\\")
    fi
    if [ -e \\"$javaSource\\" ]; then
      if [ ! -e \\"$javaClass\\" ]; then
        log \\" - Compiling MavenWrapperDownloader.java ...\\"
        (\\"$JAVA_HOME/bin/javac\\" \\"$javaSource\\")
      fi
      if [ -e \\"$javaClass\\" ]; then
        log \\" - Running MavenWrapperDownloader.java ...\\"
        (\\"$JAVA_HOME/bin/java\\" -cp .mvn/wrapper MavenWrapperDownloader \\"$wrapperUrl\\" \\"$wrapperJarPath\\") || rm -f \\"$wrapperJarPath\\"
      fi
    fi
  fi
fi
##########################################################################################
# End of extension
##########################################################################################

# If specified, validate the SHA-256 sum of the Maven wrapper jar file
wrapperSha256Sum=\\"\\"
while IFS=\\"=\\" read -r key value; do
  case \\"$key\\" in wrapperSha256Sum)
    wrapperSha256Sum=$value
    break
    ;;
  esac
done <\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\\"
if [ -n \\"$wrapperSha256Sum\\" ]; then
  wrapperSha256Result=false
  if command -v sha256sum >/dev/null; then
    if echo \\"$wrapperSha256Sum  $wrapperJarPath\\" | sha256sum -c >/dev/null 2>&1; then
      wrapperSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo \\"$wrapperSha256Sum  $wrapperJarPath\\" | shasum -a 256 -c >/dev/null 2>&1; then
      wrapperSha256Result=true
    fi
  else
    echo \\"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\\" >&2
    echo \\"Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties.\\" >&2
    exit 1
  fi
  if [ $wrapperSha256Result = false ]; then
    echo \\"Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.\\" >&2
    echo \\"Investigate or delete $wrapperJarPath to attempt a clean download.\\" >&2
    echo \\"If you updated your Maven version, you need to update the specified wrapperSha256Sum property.\\" >&2
    exit 1
  fi
fi

MAVEN_OPTS=\\"$(concat_lines \\"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\\") $MAVEN_OPTS\\"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=$(cygpath --path --windows \\"$JAVA_HOME\\")
  [ -n \\"$CLASSPATH\\" ] \\\\
    && CLASSPATH=$(cygpath --path --windows \\"$CLASSPATH\\")
  [ -n \\"$MAVEN_PROJECTBASEDIR\\" ] \\\\
    && MAVEN_PROJECTBASEDIR=$(cygpath --path --windows \\"$MAVEN_PROJECTBASEDIR\\")
fi

# Provide a \\"standardized\\" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS=\\"$MAVEN_CONFIG $*\\"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

# shellcheck disable=SC2086 # safe args
exec \\"$JAVACMD\\" \\\\
  $MAVEN_OPTS \\\\
  $MAVEN_DEBUG_OPTS \\\\
  -classpath \\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\\" \\\\
  \\"-Dmaven.multiModuleProjectDirectory=\${MAVEN_PROJECTBASEDIR}\\" \\\\
  \${WRAPPER_LAUNCHER} $MAVEN_CONFIG \\"$@\\"
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: mvnw.cmd 1`] = `
"@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM \\"License\\"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if \\"%MAVEN_BATCH_ECHO%\\" == \\"on\\"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if \\"%HOME%\\" == \\"\\" (set \\"HOME=%HOMEDRIVE%%HOMEPATH%\\")

@REM Execute a user defined script before this one
if not \\"%MAVEN_SKIP_RC%\\" == \\"\\" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist \\"%USERPROFILE%\\\\mavenrc_pre.bat\\" call \\"%USERPROFILE%\\\\mavenrc_pre.bat\\" %*
if exist \\"%USERPROFILE%\\\\mavenrc_pre.cmd\\" call \\"%USERPROFILE%\\\\mavenrc_pre.cmd\\" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not \\"%JAVA_HOME%\\" == \\"\\" goto OkJHome

echo. >&2
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo. >&2
goto error

:OkJHome
if exist \\"%JAVA_HOME%\\\\bin\\\\java.exe\\" goto init

echo. >&2
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = \\"%JAVA_HOME%\\" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo. >&2
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder \\".mvn\\".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT \\"%MAVEN_PROJECTBASEDIR%\\"==\\"\\" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST \\"%WDIR%\\"\\\\.mvn goto baseDirFound
cd ..
IF \\"%WDIR%\\"==\\"%CD%\\" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd \\"%EXEC_DIR%\\"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd \\"%EXEC_DIR%\\"

:endDetectBaseDir

IF NOT EXIST \\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\jvm.config\\" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F \\"usebackq delims=\\" %%a in (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\jvm.config\\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE=\\"%JAVA_HOME%\\\\bin\\\\java.exe\\"
set WRAPPER_JAR=\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.jar\\"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set WRAPPER_URL=\\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"

FOR /F \\"usebackq tokens=1,2 delims==\\" %%A IN (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.properties\\") DO (
    IF \\"%%A\\"==\\"wrapperUrl\\" SET WRAPPER_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not \\"%MVNW_REPOURL%\\" == \\"\\" (
        SET WRAPPER_URL=\\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
    )
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %WRAPPER_URL%
    )

    powershell -Command \\"&{\\"^
		\\"$webclient = new-object System.Net.WebClient;\\"^
		\\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\\"^
		\\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\\"^
		\\"}\\"^
		\\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')\\"^
		\\"}\\"
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file
SET WRAPPER_SHA_256_SUM=\\"\\"
FOR /F \\"usebackq tokens=1,2 delims==\\" %%A IN (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.properties\\") DO (
    IF \\"%%A\\"==\\"wrapperSha256Sum\\" SET WRAPPER_SHA_256_SUM=%%B
)
IF NOT %WRAPPER_SHA_256_SUM%==\\"\\" (
    powershell -Command \\"&{\\"^
       \\"Import-Module $PSHOME\\\\Modules\\\\Microsoft.PowerShell.Utility -Function Get-FileHash;\\"^
       \\"$hash = (Get-FileHash \\\\\\"%WRAPPER_JAR%\\\\\\" -Algorithm SHA256).Hash.ToLower();\\"^
       \\"If('%WRAPPER_SHA_256_SUM%' -ne $hash){\\"^
       \\"  Write-Error 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';\\"^
       \\"  Write-Error 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';\\"^
       \\"  Write-Error 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';\\"^
       \\"  exit 1;\\"^
       \\"}\\"^
       \\"}\\"
    if ERRORLEVEL 1 goto error
)

@REM Provide a \\"standardized\\" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  \\"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\\" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not \\"%MAVEN_SKIP_RC%\\"==\\"\\" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist \\"%USERPROFILE%\\\\mavenrc_post.bat\\" call \\"%USERPROFILE%\\\\mavenrc_post.bat\\"
if exist \\"%USERPROFILE%\\\\mavenrc_post.cmd\\" call \\"%USERPROFILE%\\\\mavenrc_post.cmd\\"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if \\"%MAVEN_BATCH_PAUSE%\\"==\\"on\\" pause

if \\"%MAVEN_TERMINATE_CMD%\\"==\\"on\\" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for adeo case study: pom.xml 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.asyncapi</groupId>
    <artifactId>quarkus-kafka</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>
        <compiler-plugin.version>3.14.0</compiler-plugin.version>
        <maven.compiler.release>21</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
        <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
        <quarkus.platform.version>3.25.2</quarkus.platform.version>
        <skipITs>true</skipITs>
        <surefire-plugin.version>3.5.3</surefire-plugin.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>\${quarkus.platform.group-id}</groupId>
                <artifactId>\${quarkus.platform.artifact-id}</artifactId>
                <version>\${quarkus.platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-messaging-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>\${quarkus.platform.group-id}</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <version>\${quarkus.platform.version}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                            <goal>generate-code</goal>
                            <goal>generate-code-tests</goal>
                            <goal>native-image-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>\${compiler-plugin.version}</version>
                <configuration>
                    <parameters>true</parameters>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>\${surefire-plugin.version}</version>
                <configuration>
                    <systemPropertyVariables>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>\${maven.home}</maven.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>\${surefire-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <native.image.path>\${project.build.directory}/\${project.build.finalName}-runner</native.image.path>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>\${maven.home}</maven.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>native</id>
            <activation>
                <property>
                    <name>native</name>
                </property>
            </activation>
            <properties>
                <skipITs>false</skipITs>
                <quarkus.native.enabled>true</quarkus.native.enabled>
            </properties>
        </profile>
    </profiles>
</project>
"
`;
