{%- macro initProperties(schema, required=true) %}
  {%- if schema.allOf() | length %}
    {%- for allOfSchema in schema.allOf() %}
    {{initProperties(allOfSchema)}}
    {%- endfor %}
  {%- elif schema.oneOf() | length %}
    oneOf:{{schema.oneOf() | oneOfSchemaType}}
  {%- elif schema.anyOf() | length %}
    {%- for anyOfSchema in schema.anyOf() %}
    {{initProperties(anyOfSchema, false)}}
    {%- endfor %}
  {%- elif schema.uid() | length %}
    {{initProperty(schema.uid(), schema.uid())}}
  {%- endif %}
{%- endmacro %}
{%- macro setConstructorProperties(schema) %}
  {%- if schema.allOf() | length %}
    {%- for allOfSchema in schema.allOf() %}
    {{setConstructorProperties(allOfSchema)}}
    {%- endfor %}
  {%- elif schema.oneOf() | length %}
    {{setProperty("oneOf")}}
  {%- elif schema.anyOf() | length %}
    {%- for anyOfSchema in schema.anyOf() %}
    {{setConstructorProperties(anyOfSchema)}}
    {%- endfor %}
  {%- elif schema.uid() | length %}
    {{setProperty(schema.uid())}}
  {%- endif %}
{%- endmacro %}
{%- macro importSchemas(schema) %}
  {%- if schema.allOf() | length %}
    {%- for allOfSchema in schema.allOf() %}
    {{importSchemas(allOfSchema)}}
    {%- endfor %}
  {%- elif schema.oneOf() | length %}
    {{importSchema("OneOf")}}
    {%- for oneOfSchema in schema.oneOf() %}
    {{importSchemas(oneOfSchema)}}
    {%- endfor %}
  {%- elif schema.anyOf() | length %}
    {%- for anyOfSchema in schema.anyOf() %}
    {{importSchemas(anyOfSchema)}}
    {%- endfor %}
  {%- elif schema.uid() | length %}
    {{importSchema(schema.uid())}}
  {%- endif %}
{%- endmacro %}
{%- macro initProperty(propertyName, propertyType) %}
  {{propertyName | camelCase}}:{{propertyType | pascalCase}}Schema;
{% endmacro %}

{%- macro setProperty(propertyName) %}
    this.{{propertyName | camelCase}} = {{propertyName | camelCase}};
{% endmacro %}

{%- macro importSchema(propertyName) %}
import { default as {{propertyName | pascalCase}}Schema } from '../schema/{{propertyName | pascalCase}}';
{% endmacro %}
{{ importSchemas(message.payload()) }}

export default class {{ message.name() | pascalCase}} {
  {{ initProperties(message.payload()) }}

  constructor(
    {{message.payload() | constructorParameters}}
  ){
  {{setConstructorProperties(message.payload())}}
  }

  /**
   * Parses a JSON string to an object of {{ message.name() | pascalCase}} message class.
   * @param json string to be parsed as {{ message.name() | pascalCase}}.
   */
  public static toMessage(json: string): {{ message.name() | pascalCase }} {
    return JSON.parse(json);
  }

}
