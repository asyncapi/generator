
{% macro reply(channelName, subscribeMessage, publishMessage, server) %}
export function reply(onRequest: (err?: NatsError, msg?: {{subscribeMessage.uid() | pascalCase}}Message) => {{publishMessage.uid() | pascalCase}}Message, onReplyError: (err: NatsError) => void, nc?: Client): Promise<Subscription> {
  return new Promise(async (resolve, reject) => {
    if (nc) {
      try {

        let subscribeOptions: SubscriptionOptions = {};
        {%- if subscribeMessage | hasNatsBindings %}
        {%- if subscribeMessage.bindings().nats().queue() | length %}
        //If queue
        subscribeOptions.queue = '{{subscribeMessage.bindings().nats().queue().name()}}';
        {%- endif %}
        {%- if subscribeMessage.bindings().nats().unsubAfter() | length %}
        //If unsubafter
        subscribeOptions.max = {{subscribeMessage.bindings().nats().unsubAfter()}};
        {%- endif %}
        {%- endif %}

        let subscription = nc.subscribe('{{channelName}}', (err, msg) => {
          if (err) {
            onRequest(err);
          } else {
            let processedData = utils.processRecievedData(msg.data, Payload.{{server | tsPayload}}, '{{server | tsEncoding}}');
            let requestData = new {{subscribeMessage.name() | pascalCase}}Message();
            requestData.copyFrom(processedData);

            let responseObject = onRequest(undefined, requestData);
            if (msg.reply) {
              try {
                let requestData = utils.beforeResponse(responseObject, Payload.{{server | tsPayload}}, '{{server | tsEncoding}}');
                nc.publish(msg.reply, requestData);
              } catch (e) {
                if (onReplyError) {
                  onReplyError(e)
                } else {
                  console.error(e)
                }
              }
            } else {
              let error = new NatsError('Expected request to need a reply, did not..', '000');
              if (onReplyError) {
                onReplyError(error)
              } else {
                console.error(error)
              }
            }
          }
        }, subscribeOptions);
        resolve(subscription);
      } catch (e) {
        reject(e);
      }
    } else {
      reject(new Error("Nats client is not connected"));
    }
  })
}

{% endmacro %}
