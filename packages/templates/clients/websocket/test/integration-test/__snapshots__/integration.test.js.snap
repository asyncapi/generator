// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebSocket Clients Integration Tests Dart Client Common Integration tests for Dart client generation generate simple client for hoppscotch echo with custom client name: client.dart 1`] = `
"///
///
/// Hoppscotch Echo WebSocket Client - 1.0.0
/// Protocol: wss
/// Host: echo-websocket.hoppscotch.io
///
///

import 'dart:convert';
import 'package:web_socket_channel/web_socket_channel.dart';

class HoppscotchClient {

  final String _url;
  WebSocketChannel? _channel;
  final List<void Function(String)> _messageHandlers = [];
  final List<void Function(Object)> _errorHandlers = [];

  /// Constructor to initialize the WebSocket client
  /// 
  /// [url] - The WebSocket server URL. Use it if the server URL is different from the default one taken from the AsyncAPI document.
  HoppscotchClient({String? url})
    : _url = url ?? 'wss://echo-websocket.hoppscotch.io';


  /// Method to establish a WebSocket connection
  Future<void> connect() async {
    if (_channel != null) {
      print('Already connected to Hoppscotch Echo WebSocket Client server');
      return;
    }
    try {
      final wsUrl = Uri.parse(_url);
      _channel = WebSocketChannel.connect(wsUrl);
      print('Connected to Hoppscotch Echo WebSocket Client server');

        /// Listen to the incoming message stream
      _channel?.stream.listen(
        (message) {
          if (_messageHandlers.isNotEmpty) {
            for (var handler in _messageHandlers) {
              _handleMessage(message, handler);
            }
          } else {
            print('Message received: $message');
          }
        },
        onError: (error) {
          if (_errorHandlers.isNotEmpty) {
            for (var handler in _errorHandlers) {
              handler(error);
            }
          } else {
            print('WebSocket Error: $error');
          }
        },
        onDone: () {
          _channel = null;
          print('Disconnected from Hoppscotch Echo WebSocket Client server');
        },
      );
    } catch (error) {
      print('Connection failed: $error');
      rethrow;
    }
  }

  /// Method to register custom message handlers
  void registerMessageHandler(void Function(String) handler) {
    _messageHandlers.add(handler);
  }

  /// Method to register custom error handlers
  void registerErrorHandler(void Function(Object) handler) {
    _errorHandlers.add(handler);
  }

  /// Method to handle message with callback
  void _handleMessage(dynamic message, void Function(String) cb) {
    cb(message is String ? message : message.toString());
  }

  /// Method to send an echo message to the server
  void sendEchoMessage(dynamic message) {
    if (_channel == null) {
      print('Error: WebSocket is not connected.');
      return;
    }
    final payload = message is String ? message : jsonEncode(message);
    _channel!.sink.add(payload);
    print('Sent message to echo server: $payload');
  }

  /// Method to close the WebSocket connection
  void close() {
    _channel?.sink.close();
    _channel = null;
    print('WebSocket connection closed.');
  }
}

"
`;

exports[`WebSocket Clients Integration Tests Dart Client Common Integration tests for Dart client generation generate simple client for hoppscotch echo with custom client name: pubspec.yaml 1`] = `
"name: wsclient
environment:
  sdk: '>=3.0.0 <4.0.0'
dependencies:
  web_socket_channel: ^3.0.2
"
`;

exports[`WebSocket Clients Integration Tests Dart Client Common Integration tests for Dart client generation generate simple client for hoppscotch echo: client.dart 1`] = `
"///
///
/// Hoppscotch Echo WebSocket Client - 1.0.0
/// Protocol: wss
/// Host: echo-websocket.hoppscotch.io
///
///

import 'dart:convert';
import 'package:web_socket_channel/web_socket_channel.dart';

class HoppscotchEchoWebSocketClient {

  final String _url;
  WebSocketChannel? _channel;
  final List<void Function(String)> _messageHandlers = [];
  final List<void Function(Object)> _errorHandlers = [];

  /// Constructor to initialize the WebSocket client
  /// 
  /// [url] - The WebSocket server URL. Use it if the server URL is different from the default one taken from the AsyncAPI document.
  HoppscotchEchoWebSocketClient({String? url})
    : _url = url ?? 'wss://echo-websocket.hoppscotch.io';


  /// Method to establish a WebSocket connection
  Future<void> connect() async {
    if (_channel != null) {
      print('Already connected to Hoppscotch Echo WebSocket Client server');
      return;
    }
    try {
      final wsUrl = Uri.parse(_url);
      _channel = WebSocketChannel.connect(wsUrl);
      print('Connected to Hoppscotch Echo WebSocket Client server');

        /// Listen to the incoming message stream
      _channel?.stream.listen(
        (message) {
          if (_messageHandlers.isNotEmpty) {
            for (var handler in _messageHandlers) {
              _handleMessage(message, handler);
            }
          } else {
            print('Message received: $message');
          }
        },
        onError: (error) {
          if (_errorHandlers.isNotEmpty) {
            for (var handler in _errorHandlers) {
              handler(error);
            }
          } else {
            print('WebSocket Error: $error');
          }
        },
        onDone: () {
          _channel = null;
          print('Disconnected from Hoppscotch Echo WebSocket Client server');
        },
      );
    } catch (error) {
      print('Connection failed: $error');
      rethrow;
    }
  }

  /// Method to register custom message handlers
  void registerMessageHandler(void Function(String) handler) {
    _messageHandlers.add(handler);
  }

  /// Method to register custom error handlers
  void registerErrorHandler(void Function(Object) handler) {
    _errorHandlers.add(handler);
  }

  /// Method to handle message with callback
  void _handleMessage(dynamic message, void Function(String) cb) {
    cb(message is String ? message : message.toString());
  }

  /// Method to send an echo message to the server
  void sendEchoMessage(dynamic message) {
    if (_channel == null) {
      print('Error: WebSocket is not connected.');
      return;
    }
    final payload = message is String ? message : jsonEncode(message);
    _channel!.sink.add(payload);
    print('Sent message to echo server: $payload');
  }

  /// Method to close the WebSocket connection
  void close() {
    _channel?.sink.close();
    _channel = null;
    print('WebSocket connection closed.');
  }
}

"
`;

exports[`WebSocket Clients Integration Tests Dart Client Common Integration tests for Dart client generation generate simple client for hoppscotch echo: pubspec.yaml 1`] = `
"name: wsclient
environment:
  sdk: '>=3.0.0 <4.0.0'
dependencies:
  web_socket_channel: ^3.0.2
"
`;

exports[`WebSocket Clients Integration Tests Dart Client Common Integration tests for Dart client generation generate simple client for postman echo: client.dart 1`] = `
"///
///
/// Postman Echo WebSocket Client - 1.0.0
/// Protocol: wss
/// Host: ws.postman-echo.com
/// Path: /raw
///
///

import 'dart:convert';
import 'package:web_socket_channel/web_socket_channel.dart';

class PostmanEchoWebSocketClientClient {

  final String _url;
  WebSocketChannel? _channel;
  final List<void Function(String)> _messageHandlers = [];
  final List<void Function(Object)> _errorHandlers = [];

  /// Constructor to initialize the WebSocket client
  /// 
  /// [url] - The WebSocket server URL. Use it if the server URL is different from the default one taken from the AsyncAPI document.
  PostmanEchoWebSocketClientClient({String? url})
    : _url = url ?? 'wss://ws.postman-echo.com/raw';


  /// Method to establish a WebSocket connection
  Future<void> connect() async {
    if (_channel != null) {
      print('Already connected to Postman Echo WebSocket Client server');
      return;
    }
    try {
      final wsUrl = Uri.parse(_url);
      _channel = WebSocketChannel.connect(wsUrl);
      print('Connected to Postman Echo WebSocket Client server');

        /// Listen to the incoming message stream
      _channel?.stream.listen(
        (message) {
          if (_messageHandlers.isNotEmpty) {
            for (var handler in _messageHandlers) {
              _handleMessage(message, handler);
            }
          } else {
            print('Message received: $message');
          }
        },
        onError: (error) {
          if (_errorHandlers.isNotEmpty) {
            for (var handler in _errorHandlers) {
              handler(error);
            }
          } else {
            print('WebSocket Error: $error');
          }
        },
        onDone: () {
          _channel = null;
          print('Disconnected from Postman Echo WebSocket Client server');
        },
      );
    } catch (error) {
      print('Connection failed: $error');
      rethrow;
    }
  }

  /// Method to register custom message handlers
  void registerMessageHandler(void Function(String) handler) {
    _messageHandlers.add(handler);
  }

  /// Method to register custom error handlers
  void registerErrorHandler(void Function(Object) handler) {
    _errorHandlers.add(handler);
  }

  /// Method to handle message with callback
  void _handleMessage(dynamic message, void Function(String) cb) {
    cb(message is String ? message : message.toString());
  }

  /// Method to send an echo message to the server
  void sendEchoMessage(dynamic message) {
    if (_channel == null) {
      print('Error: WebSocket is not connected.');
      return;
    }
    final payload = message is String ? message : jsonEncode(message);
    _channel!.sink.add(payload);
    print('Sent message to echo server: $payload');
  }

  /// Method to close the WebSocket connection
  void close() {
    _channel?.sink.close();
    _channel = null;
    print('WebSocket connection closed.');
  }
}

"
`;

exports[`WebSocket Clients Integration Tests Dart Client Common Integration tests for Dart client generation generate simple client for postman echo: pubspec.yaml 1`] = `
"name: wsclient
environment:
  sdk: '>=3.0.0 <4.0.0'
dependencies:
  web_socket_channel: ^3.0.2
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: .dockerignore 1`] = `
"*
!target/*-runner
!target/*-runner.jar
!target/lib/*
!target/quarkus-app/*"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: .gitignore 1`] = `
"#Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
release.properties
.flattened-pom.xml

# Eclipse
.project
.classpath
.settings/
bin/

# IntelliJ
.idea
*.ipr
*.iml
*.iws

# NetBeans
nb-configuration.xml

# Visual Studio Code
.vscode
.factorypath

# OSX
.DS_Store

# Vim
*.swp
*.swo

# patch
*.orig
*.rej

# Local environment
.env

# Plugin directory
/.quarkus/cli/plugins/
# TLS Certificates
.certs/
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: .gitignore 2`] = `
"maven-wrapper.jar
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: Dockerfile.jvm 1`] = `
"####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the container image run:
#
# ./mvnw package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/quarkus-websocket-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/quarkus-websocket-jvm
#
# If you want to include the debug port into your docker image
# you will have to expose the debug port (default 5005 being the default) like this :  EXPOSE 8080 5005.
# Additionally you will have to set -e JAVA_DEBUG=true and -e JAVA_DEBUG_PORT=*:5005
# when running the container
#
# Then run the container using :
#
# docker run -i --rm -p 8080:8080 quarkus/quarkus-websocket-jvm
#
# This image uses the \`run-java.sh\` script to run the application.
# This scripts computes the command line to execute your Java application, and
# includes memory/GC tuning.
# You can configure the behavior using the following environment properties:
# - JAVA_OPTS: JVM options passed to the \`java\` command (example: \\"-verbose:class\\") - Be aware that this will override
# the default JVM options, use \`JAVA_OPTS_APPEND\` to append options
# - JAVA_OPTS_APPEND: User specified Java options to be appended to generated options
#   in JAVA_OPTS (example: \\"-Dsome.property=foo\\")
# - JAVA_MAX_MEM_RATIO: Is used when no \`-Xmx\` option is given in JAVA_OPTS. This is
#   used to calculate a default maximal heap memory based on a containers restriction.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then \`-Xmx\` is set to a ratio
#   of the container available memory as set here. The default is \`50\` which means 50%
#   of the available memory is used as an upper boundary. You can skip this mechanism by
#   setting this value to \`0\` in which case no \`-Xmx\` option is added.
# - JAVA_INITIAL_MEM_RATIO: Is used when no \`-Xms\` option is given in JAVA_OPTS. This
#   is used to calculate a default initial heap memory based on the maximum heap memory.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then \`-Xms\` is set to a ratio
#   of the \`-Xmx\` memory as set here. The default is \`25\` which means 25% of the \`-Xmx\`
#   is used as the initial heap size. You can skip this mechanism by setting this value
#   to \`0\` in which case no \`-Xms\` option is added (example: \\"25\\")
# - JAVA_MAX_INITIAL_MEM: Is used when no \`-Xms\` option is given in JAVA_OPTS.
#   This is used to calculate the maximum value of the initial heap memory. If used in
#   a container without any memory constraints for the container then this option has
#   no effect. If there is a memory constraint then \`-Xms\` is limited to the value set
#   here. The default is 4096MB which means the calculated value of \`-Xms\` never will
#   be greater than 4096MB. The value of this variable is expressed in MB (example: \\"4096\\")
# - JAVA_DIAGNOSTICS: Set this to get some diagnostics information to standard output
#   when things are happening. This option, if set to true, will set
#  \`-XX:+UnlockDiagnosticVMOptions\`. Disabled by default (example: \\"true\\").
# - JAVA_DEBUG: If set remote debugging will be switched on. Disabled by default (example:
#    true\\").
# - JAVA_DEBUG_PORT: Port used for remote debugging. Defaults to 5005 (example: \\"8787\\").
# - CONTAINER_CORE_LIMIT: A calculated core limit as described in
#   https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt. (example: \\"2\\")
# - CONTAINER_MAX_MEMORY: Memory limit given to the container (example: \\"1024\\").
# - GC_MIN_HEAP_FREE_RATIO: Minimum percentage of heap free after GC to avoid expansion.
#   (example: \\"20\\")
# - GC_MAX_HEAP_FREE_RATIO: Maximum percentage of heap free after GC to avoid shrinking.
#   (example: \\"40\\")
# - GC_TIME_RATIO: Specifies the ratio of the time spent outside the garbage collection.
#   (example: \\"4\\")
# - GC_ADAPTIVE_SIZE_POLICY_WEIGHT: The weighting given to the current GC time versus
#   previous GC times. (example: \\"90\\")
# - GC_METASPACE_SIZE: The initial metaspace size. (example: \\"20\\")
# - GC_MAX_METASPACE_SIZE: The maximum metaspace size. (example: \\"100\\")
# - GC_CONTAINER_OPTIONS: Specify Java GC to use. The value of this variable should
#   contain the necessary JRE command-line options to specify the required GC, which
#   will override the default of \`-XX:+UseParallelGC\` (example: -XX:+UseG1GC).
# - HTTPS_PROXY: The location of the https proxy. (example: \\"myuser@127.0.0.1:8080\\")
# - HTTP_PROXY: The location of the http proxy. (example: \\"myuser@127.0.0.1:8080\\")
# - NO_PROXY: A comma separated lists of hosts, IP addresses or domains that can be
#   accessed directly. (example: \\"foo.example.com,bar.example.com\\")
#
###
FROM registry.access.redhat.com/ubi9/openjdk-21:1.21

ENV LANGUAGE='en_US:en'


# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=185 target/quarkus-app/*.jar /deployments/
COPY --chown=185 target/quarkus-app/app/ /deployments/app/
COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 185
ENV JAVA_OPTS_APPEND=\\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\\"
ENV JAVA_APP_JAR=\\"/deployments/quarkus-run.jar\\"

ENTRYPOINT [ \\"/opt/jboss/container/java/run/run-java.sh\\" ]

"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: HoppscotchClient.java 1`] = `
"//////////////////////////////////////////////////
//
// Hoppscotch Echo WebSocket Client - 1.0.0
// Protocol: wss
// Host: echo-websocket.hoppscotch.io
//
//////////////////////////////////////////////////


package com.asyncapi;

import io.quarkus.websockets.next.WebSocketClient;
import io.quarkus.websockets.next.WebSocketClientConnection;
import io.quarkus.websockets.next.OnOpen;
import io.quarkus.websockets.next.OnClose;
import io.quarkus.websockets.next.OnError;
import io.quarkus.websockets.next.OnTextMessage;
import io.quarkus.websockets.next.CloseReason;
import jakarta.inject.Inject;
import io.quarkus.logging.Log;

@WebSocketClient(path = \\"/\\")  
public class HoppscotchClient{

  @Inject
  WebSocketClientConnection connection;

  @OnOpen
  public void onOpen() {
      String broadcastMessage = \\"Echo called from Hoppscotch Echo WebSocket Client server\\";
      Log.info(\\"Connected to Hoppscotch Echo WebSocket Client server\\");
      Log.info(broadcastMessage);
  }

  @OnTextMessage
  public void sendEchoMessage(String message, WebSocketClientConnection connection) {
      Log.info(\\"Received text message: \\" + message);
  }

  @OnError
  public void onError(Throwable throwable) {
      Log.error(\\"Websocket connection error: \\" + throwable.getMessage());
  }



  @OnClose
   public void onClose(CloseReason reason, WebSocketClientConnection connection) {
      int code = reason.getCode();
      Log.info(\\"Websocket disconnected from Hoppscotch Echo WebSocket Client with Close code: \\" + code);
  }
}


"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: HoppscotchClientConnector.java 1`] = `
"
package com.asyncapi;

import io.quarkus.websockets.next.WebSocketConnector;
import io.quarkus.websockets.next.WebSocketClientConnection;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.annotation.PostConstruct;
import io.quarkus.logging.Log;
import io.quarkus.runtime.Startup;

  @Startup
  @Singleton  
  public class HoppscotchClientConnector{

    @Inject
    WebSocketConnector<HoppscotchClient> connector;



    @PostConstruct
    void openAndSendMessagesWithDelay() {
        new Thread(() -> {
            try {
                Log.info(\\"Starting WebSocket connection attempt...\\");
                WebSocketClientConnection connection = connector.connectAndAwait();

                // Wait 2 seconds before first message
                Thread.sleep(2000);

                // Send 5 messages
                for (int i = 1; i <= 5; i++) {
                    String msg = \\"Message #\\" + i + \\" from Quarkus\\";
                    connection.sendTextAndAwait(msg);
                    Log.info(\\"Sent: \\" + msg);
                    Thread.sleep(5000);
                }

                // Wait 10 seconds after final message
                Log.info(\\"All messages sent. Waiting 10 seconds before closing...\\");
                Thread.sleep(10000);

                connection.closeAndAwait();
                Log.info(\\"Connection closed gracefully.\\");

            } catch (Exception e) {
                Log.error(\\"Error during WebSocket communication\\", e);
            }
        }).start();
    }
  }



"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: MavenWrapperDownloader.java 1`] = `
"/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * \\"License\\"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.IOException;
import java.io.InputStream;
import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.net.URI;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.concurrent.ThreadLocalRandom;

public final class MavenWrapperDownloader {
    private static final String WRAPPER_VERSION = \\"3.3.2\\";

    private static final boolean VERBOSE = Boolean.parseBoolean(System.getenv(\\"MVNW_VERBOSE\\"));

    public static void main(String[] args) {
        log(\\"Apache Maven Wrapper Downloader \\" + WRAPPER_VERSION);

        if (args.length != 2) {
            System.err.println(\\" - ERROR wrapperUrl or wrapperJarPath parameter missing\\");
            System.exit(1);
        }

        try {
            log(\\" - Downloader started\\");
            final URL wrapperUrl = URI.create(args[0]).toURL();
            final String jarPath = args[1].replace(\\"..\\", \\"\\"); // Sanitize path
            final Path wrapperJarPath = Paths.get(jarPath).toAbsolutePath().normalize();
            downloadFileFromURL(wrapperUrl, wrapperJarPath);
            log(\\"Done\\");
        } catch (IOException e) {
            System.err.println(\\"- Error downloading: \\" + e.getMessage());
            if (VERBOSE) {
                e.printStackTrace();
            }
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(URL wrapperUrl, Path wrapperJarPath)
            throws IOException {
        log(\\" - Downloading to: \\" + wrapperJarPath);
        if (System.getenv(\\"MVNW_USERNAME\\") != null && System.getenv(\\"MVNW_PASSWORD\\") != null) {
            final String username = System.getenv(\\"MVNW_USERNAME\\");
            final char[] password = System.getenv(\\"MVNW_PASSWORD\\").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        Path temp = wrapperJarPath
                .getParent()
                .resolve(wrapperJarPath.getFileName() + \\".\\"
                        + Long.toUnsignedString(ThreadLocalRandom.current().nextLong()) + \\".tmp\\");
        try (InputStream inStream = wrapperUrl.openStream()) {
            Files.copy(inStream, temp, StandardCopyOption.REPLACE_EXISTING);
            Files.move(temp, wrapperJarPath, StandardCopyOption.REPLACE_EXISTING);
        } finally {
            Files.deleteIfExists(temp);
        }
        log(\\" - Downloader complete\\");
    }

    private static void log(String msg) {
        if (VERBOSE) {
            System.out.println(msg);
        }
    }

}
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: README.md 1`] = `
"# quarkus-websocket

This project uses Quarkus, the Supersonic Subatomic Java Framework.

If you want to learn more about Quarkus, please visit its website: <https://quarkus.io/>.

## Running the application in dev mode

You can run your application in dev mode that enables live coding using:

\`\`\`shell script
./mvnw quarkus:dev
\`\`\`

> **_NOTE:_**  Quarkus now ships with a Dev UI, which is available in dev mode only at <http://localhost:8080/q/dev/>.

## Packaging and running the application

The application can be packaged using:

\`\`\`shell script
./mvnw package
\`\`\`

It produces the \`quarkus-run.jar\` file in the \`target/quarkus-app/\` directory.
Be aware that it’s not an _über-jar_ as the dependencies are copied into the \`target/quarkus-app/lib/\` directory.

The application is now runnable using \`java -jar target/quarkus-app/quarkus-run.jar\`.

If you want to build an _über-jar_, execute the following command:

\`\`\`shell script
./mvnw package -Dquarkus.package.jar.type=uber-jar
\`\`\`

The application, packaged as an _über-jar_, is now runnable using \`java -jar target/*-runner.jar\`.

## Creating a native executable

You can create a native executable using:

\`\`\`shell script
./mvnw package -Dnative
\`\`\`

Or, if you don't have GraalVM installed, you can run the native executable build in a container using:

\`\`\`shell script
./mvnw package -Dnative -Dquarkus.native.container-build=true
\`\`\`

 You can then execute your native executable with: \`./target/quarkus-websocket-1.0.0-SNAPSHOT-runner\`

If you want to learn more about building native executables, please consult <https://quarkus.io/guides/maven-tooling>.

## Related Guides

- WebSockets Next ([guide](https://quarkus.io/guides/websockets-next-reference)): Implementation of the WebSocket API with enhanced efficiency and usability
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: application.properties 1`] = `
"# application.properties

# Define a named base-uri for HoppscotchClient
com.asyncapi.HoppscotchClient.base-uri=wss://echo-websocket.hoppscotch.io
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: maven-wrapper.properties 1`] = `
"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \\"License\\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=source
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: mvnw 1`] = `
"#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \\"License\\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z \\"$MAVEN_SKIP_RC\\" ]; then

  if [ -f /usr/local/etc/mavenrc ]; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ]; then
    . /etc/mavenrc
  fi

  if [ -f \\"$HOME/.mavenrc\\" ]; then
    . \\"$HOME/.mavenrc\\"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false
darwin=false
mingw=false
case \\"$(uname)\\" in
CYGWIN*) cygwin=true ;;
MINGW*) mingw=true ;;
Darwin*)
  darwin=true
  # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
  # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
  if [ -z \\"$JAVA_HOME\\" ]; then
    if [ -x \\"/usr/libexec/java_home\\" ]; then
      JAVA_HOME=\\"$(/usr/libexec/java_home)\\"
      export JAVA_HOME
    else
      JAVA_HOME=\\"/Library/Java/Home\\"
      export JAVA_HOME
    fi
  fi
  ;;
esac

if [ -z \\"$JAVA_HOME\\" ]; then
  if [ -r /etc/gentoo-release ]; then
    JAVA_HOME=$(java-config --jre-home)
  fi
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin; then
  [ -n \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=$(cygpath --unix \\"$JAVA_HOME\\")
  [ -n \\"$CLASSPATH\\" ] \\\\
    && CLASSPATH=$(cygpath --path --unix \\"$CLASSPATH\\")
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw; then
  [ -n \\"$JAVA_HOME\\" ] && [ -d \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=\\"$(
      cd \\"$JAVA_HOME\\" || (
        echo \\"cannot cd into $JAVA_HOME.\\" >&2
        exit 1
      )
      pwd
    )\\"
fi

if [ -z \\"$JAVA_HOME\\" ]; then
  javaExecutable=\\"$(which javac)\\"
  if [ -n \\"$javaExecutable\\" ] && ! [ \\"$(expr \\"$javaExecutable\\" : '\\\\([^ ]*\\\\)')\\" = \\"no\\" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=$(which readlink)
    if [ ! \\"$(expr \\"$readLink\\" : '\\\\([^ ]*\\\\)')\\" = \\"no\\" ]; then
      if $darwin; then
        javaHome=\\"$(dirname \\"$javaExecutable\\")\\"
        javaExecutable=\\"$(cd \\"$javaHome\\" && pwd -P)/javac\\"
      else
        javaExecutable=\\"$(readlink -f \\"$javaExecutable\\")\\"
      fi
      javaHome=\\"$(dirname \\"$javaExecutable\\")\\"
      javaHome=$(expr \\"$javaHome\\" : '\\\\(.*\\\\)/bin')
      JAVA_HOME=\\"$javaHome\\"
      export JAVA_HOME
    fi
  fi
fi

if [ -z \\"$JAVACMD\\" ]; then
  if [ -n \\"$JAVA_HOME\\" ]; then
    if [ -x \\"$JAVA_HOME/jre/sh/java\\" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD=\\"$JAVA_HOME/jre/sh/java\\"
    else
      JAVACMD=\\"$JAVA_HOME/bin/java\\"
    fi
  else
    JAVACMD=\\"$(
      \\\\unset -f command 2>/dev/null
      \\\\command -v java
    )\\"
  fi
fi

if [ ! -x \\"$JAVACMD\\" ]; then
  echo \\"Error: JAVA_HOME is not defined correctly.\\" >&2
  echo \\"  We cannot execute $JAVACMD\\" >&2
  exit 1
fi

if [ -z \\"$JAVA_HOME\\" ]; then
  echo \\"Warning: JAVA_HOME environment variable is not set.\\" >&2
fi

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {
  if [ -z \\"$1\\" ]; then
    echo \\"Path not specified to find_maven_basedir\\" >&2
    return 1
  fi

  basedir=\\"$1\\"
  wdir=\\"$1\\"
  while [ \\"$wdir\\" != '/' ]; do
    if [ -d \\"$wdir\\"/.mvn ]; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d \\"\${wdir}\\" ]; then
      wdir=$(
        cd \\"$wdir/..\\" || exit 1
        pwd
      )
    fi
    # end of workaround
  done
  printf '%s' \\"$(
    cd \\"$basedir\\" || exit 1
    pwd
  )\\"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f \\"$1\\" ]; then
    # Remove \\\\r in case we run on Windows within Git Bash
    # and check out the repository with auto CRLF management
    # enabled. Otherwise, we may read lines that are delimited with
    # \\\\r\\\\n and produce $'-Xarg\\\\r' rather than -Xarg due to word
    # splitting rules.
    tr -s '\\\\r\\\\n' ' ' <\\"$1\\"
  fi
}

log() {
  if [ \\"$MVNW_VERBOSE\\" = true ]; then
    printf '%s\\\\n' \\"$1\\"
  fi
}

BASE_DIR=$(find_maven_basedir \\"$(dirname \\"$0\\")\\")
if [ -z \\"$BASE_DIR\\" ]; then
  exit 1
fi

MAVEN_PROJECTBASEDIR=\${MAVEN_BASEDIR:-\\"$BASE_DIR\\"}
export MAVEN_PROJECTBASEDIR
log \\"$MAVEN_PROJECTBASEDIR\\"

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
wrapperJarPath=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\\"
if [ -r \\"$wrapperJarPath\\" ]; then
  log \\"Found $wrapperJarPath\\"
else
  log \\"Couldn't find $wrapperJarPath, downloading it ...\\"

  if [ -n \\"$MVNW_REPOURL\\" ]; then
    wrapperUrl=\\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
  else
    wrapperUrl=\\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
  fi
  while IFS=\\"=\\" read -r key value; do
    # Remove '\\\\r' from value to allow usage on windows as IFS does not consider '\\\\r' as a separator ( considers space, tab, new line ('\\\\n'), and custom '=' )
    safeValue=$(echo \\"$value\\" | tr -d '\\\\r')
    case \\"$key\\" in wrapperUrl)
      wrapperUrl=\\"$safeValue\\"
      break
      ;;
    esac
  done <\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\\"
  log \\"Downloading from: $wrapperUrl\\"

  if $cygwin; then
    wrapperJarPath=$(cygpath --path --windows \\"$wrapperJarPath\\")
  fi

  if command -v wget >/dev/null; then
    log \\"Found wget ... using wget\\"
    [ \\"$MVNW_VERBOSE\\" = true ] && QUIET=\\"\\" || QUIET=\\"--quiet\\"
    if [ -z \\"$MVNW_USERNAME\\" ] || [ -z \\"$MVNW_PASSWORD\\" ]; then
      wget $QUIET \\"$wrapperUrl\\" -O \\"$wrapperJarPath\\" || rm -f \\"$wrapperJarPath\\"
    else
      wget $QUIET --http-user=\\"$MVNW_USERNAME\\" --http-password=\\"$MVNW_PASSWORD\\" \\"$wrapperUrl\\" -O \\"$wrapperJarPath\\" || rm -f \\"$wrapperJarPath\\"
    fi
  elif command -v curl >/dev/null; then
    log \\"Found curl ... using curl\\"
    [ \\"$MVNW_VERBOSE\\" = true ] && QUIET=\\"\\" || QUIET=\\"--silent\\"
    if [ -z \\"$MVNW_USERNAME\\" ] || [ -z \\"$MVNW_PASSWORD\\" ]; then
      curl $QUIET -o \\"$wrapperJarPath\\" \\"$wrapperUrl\\" -f -L || rm -f \\"$wrapperJarPath\\"
    else
      curl $QUIET --user \\"$MVNW_USERNAME:$MVNW_PASSWORD\\" -o \\"$wrapperJarPath\\" \\"$wrapperUrl\\" -f -L || rm -f \\"$wrapperJarPath\\"
    fi
  else
    log \\"Falling back to using Java to download\\"
    javaSource=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java\\"
    javaClass=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class\\"
    # For Cygwin, switch paths to Windows format before running javac
    if $cygwin; then
      javaSource=$(cygpath --path --windows \\"$javaSource\\")
      javaClass=$(cygpath --path --windows \\"$javaClass\\")
    fi
    if [ -e \\"$javaSource\\" ]; then
      if [ ! -e \\"$javaClass\\" ]; then
        log \\" - Compiling MavenWrapperDownloader.java ...\\"
        (\\"$JAVA_HOME/bin/javac\\" \\"$javaSource\\")
      fi
      if [ -e \\"$javaClass\\" ]; then
        log \\" - Running MavenWrapperDownloader.java ...\\"
        (\\"$JAVA_HOME/bin/java\\" -cp .mvn/wrapper MavenWrapperDownloader \\"$wrapperUrl\\" \\"$wrapperJarPath\\") || rm -f \\"$wrapperJarPath\\"
      fi
    fi
  fi
fi
##########################################################################################
# End of extension
##########################################################################################

# If specified, validate the SHA-256 sum of the Maven wrapper jar file
wrapperSha256Sum=\\"\\"
while IFS=\\"=\\" read -r key value; do
  case \\"$key\\" in wrapperSha256Sum)
    wrapperSha256Sum=$value
    break
    ;;
  esac
done <\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\\"
if [ -n \\"$wrapperSha256Sum\\" ]; then
  wrapperSha256Result=false
  if command -v sha256sum >/dev/null; then
    if echo \\"$wrapperSha256Sum  $wrapperJarPath\\" | sha256sum -c >/dev/null 2>&1; then
      wrapperSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo \\"$wrapperSha256Sum  $wrapperJarPath\\" | shasum -a 256 -c >/dev/null 2>&1; then
      wrapperSha256Result=true
    fi
  else
    echo \\"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\\" >&2
    echo \\"Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties.\\" >&2
    exit 1
  fi
  if [ $wrapperSha256Result = false ]; then
    echo \\"Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.\\" >&2
    echo \\"Investigate or delete $wrapperJarPath to attempt a clean download.\\" >&2
    echo \\"If you updated your Maven version, you need to update the specified wrapperSha256Sum property.\\" >&2
    exit 1
  fi
fi

MAVEN_OPTS=\\"$(concat_lines \\"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\\") $MAVEN_OPTS\\"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=$(cygpath --path --windows \\"$JAVA_HOME\\")
  [ -n \\"$CLASSPATH\\" ] \\\\
    && CLASSPATH=$(cygpath --path --windows \\"$CLASSPATH\\")
  [ -n \\"$MAVEN_PROJECTBASEDIR\\" ] \\\\
    && MAVEN_PROJECTBASEDIR=$(cygpath --path --windows \\"$MAVEN_PROJECTBASEDIR\\")
fi

# Provide a \\"standardized\\" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS=\\"$MAVEN_CONFIG $*\\"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

# shellcheck disable=SC2086 # safe args
exec \\"$JAVACMD\\" \\\\
  $MAVEN_OPTS \\\\
  $MAVEN_DEBUG_OPTS \\\\
  -classpath \\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\\" \\\\
  \\"-Dmaven.multiModuleProjectDirectory=\${MAVEN_PROJECTBASEDIR}\\" \\\\
  \${WRAPPER_LAUNCHER} $MAVEN_CONFIG \\"$@\\"
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: mvnw.cmd 1`] = `
"@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM \\"License\\"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if \\"%MAVEN_BATCH_ECHO%\\" == \\"on\\"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if \\"%HOME%\\" == \\"\\" (set \\"HOME=%HOMEDRIVE%%HOMEPATH%\\")

@REM Execute a user defined script before this one
if not \\"%MAVEN_SKIP_RC%\\" == \\"\\" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist \\"%USERPROFILE%\\\\mavenrc_pre.bat\\" call \\"%USERPROFILE%\\\\mavenrc_pre.bat\\" %*
if exist \\"%USERPROFILE%\\\\mavenrc_pre.cmd\\" call \\"%USERPROFILE%\\\\mavenrc_pre.cmd\\" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not \\"%JAVA_HOME%\\" == \\"\\" goto OkJHome

echo. >&2
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo. >&2
goto error

:OkJHome
if exist \\"%JAVA_HOME%\\\\bin\\\\java.exe\\" goto init

echo. >&2
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = \\"%JAVA_HOME%\\" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo. >&2
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder \\".mvn\\".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT \\"%MAVEN_PROJECTBASEDIR%\\"==\\"\\" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST \\"%WDIR%\\"\\\\.mvn goto baseDirFound
cd ..
IF \\"%WDIR%\\"==\\"%CD%\\" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd \\"%EXEC_DIR%\\"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd \\"%EXEC_DIR%\\"

:endDetectBaseDir

IF NOT EXIST \\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\jvm.config\\" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F \\"usebackq delims=\\" %%a in (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\jvm.config\\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE=\\"%JAVA_HOME%\\\\bin\\\\java.exe\\"
set WRAPPER_JAR=\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.jar\\"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set WRAPPER_URL=\\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"

FOR /F \\"usebackq tokens=1,2 delims==\\" %%A IN (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.properties\\") DO (
    IF \\"%%A\\"==\\"wrapperUrl\\" SET WRAPPER_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not \\"%MVNW_REPOURL%\\" == \\"\\" (
        SET WRAPPER_URL=\\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
    )
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %WRAPPER_URL%
    )

    powershell -Command \\"&{\\"^
		\\"$webclient = new-object System.Net.WebClient;\\"^
		\\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\\"^
		\\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\\"^
		\\"}\\"^
		\\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')\\"^
		\\"}\\"
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file
SET WRAPPER_SHA_256_SUM=\\"\\"
FOR /F \\"usebackq tokens=1,2 delims==\\" %%A IN (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.properties\\") DO (
    IF \\"%%A\\"==\\"wrapperSha256Sum\\" SET WRAPPER_SHA_256_SUM=%%B
)
IF NOT %WRAPPER_SHA_256_SUM%==\\"\\" (
    powershell -Command \\"&{\\"^
       \\"Import-Module $PSHOME\\\\Modules\\\\Microsoft.PowerShell.Utility -Function Get-FileHash;\\"^
       \\"$hash = (Get-FileHash \\\\\\"%WRAPPER_JAR%\\\\\\" -Algorithm SHA256).Hash.ToLower();\\"^
       \\"If('%WRAPPER_SHA_256_SUM%' -ne $hash){\\"^
       \\"  Write-Error 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';\\"^
       \\"  Write-Error 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';\\"^
       \\"  Write-Error 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';\\"^
       \\"  exit 1;\\"^
       \\"}\\"^
       \\"}\\"
    if ERRORLEVEL 1 goto error
)

@REM Provide a \\"standardized\\" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  \\"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\\" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not \\"%MAVEN_SKIP_RC%\\"==\\"\\" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist \\"%USERPROFILE%\\\\mavenrc_post.bat\\" call \\"%USERPROFILE%\\\\mavenrc_post.bat\\"
if exist \\"%USERPROFILE%\\\\mavenrc_post.cmd\\" call \\"%USERPROFILE%\\\\mavenrc_post.cmd\\"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if \\"%MAVEN_BATCH_PAUSE%\\"==\\"on\\" pause

if \\"%MAVEN_TERMINATE_CMD%\\"==\\"on\\" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo with custom client name: pom.xml 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.asyncapi</groupId>
    <artifactId>quarkus-websocket</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>
        <compiler-plugin.version>3.14.0</compiler-plugin.version>
        <maven.compiler.release>21</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
        <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
        <quarkus.platform.version>3.23.0</quarkus.platform.version>
        <skipITs>true</skipITs>
        <surefire-plugin.version>3.5.2</surefire-plugin.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>\${quarkus.platform.group-id}</groupId>
                <artifactId>\${quarkus.platform.artifact-id}</artifactId>
                <version>\${quarkus.platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-websockets-next</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>\${quarkus.platform.group-id}</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <version>\${quarkus.platform.version}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                            <goal>generate-code</goal>
                            <goal>generate-code-tests</goal>
                            <goal>native-image-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>\${compiler-plugin.version}</version>
                <configuration>
                    <parameters>true</parameters>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>\${surefire-plugin.version}</version>
                <configuration>
                    <systemPropertyVariables>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>\${maven.home}</maven.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>\${surefire-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <native.image.path>\${project.build.directory}/\${project.build.finalName}-runner</native.image.path>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>\${maven.home}</maven.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>native</id>
            <activation>
                <property>
                    <name>native</name>
                </property>
            </activation>
            <properties>
                <skipITs>false</skipITs>
                <quarkus.native.enabled>true</quarkus.native.enabled>
            </properties>
        </profile>
    </profiles>
</project>
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: .dockerignore 1`] = `
"*
!target/*-runner
!target/*-runner.jar
!target/lib/*
!target/quarkus-app/*"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: .gitignore 1`] = `
"#Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
release.properties
.flattened-pom.xml

# Eclipse
.project
.classpath
.settings/
bin/

# IntelliJ
.idea
*.ipr
*.iml
*.iws

# NetBeans
nb-configuration.xml

# Visual Studio Code
.vscode
.factorypath

# OSX
.DS_Store

# Vim
*.swp
*.swo

# patch
*.orig
*.rej

# Local environment
.env

# Plugin directory
/.quarkus/cli/plugins/
# TLS Certificates
.certs/
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: .gitignore 2`] = `
"maven-wrapper.jar
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: Dockerfile.jvm 1`] = `
"####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the container image run:
#
# ./mvnw package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/quarkus-websocket-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/quarkus-websocket-jvm
#
# If you want to include the debug port into your docker image
# you will have to expose the debug port (default 5005 being the default) like this :  EXPOSE 8080 5005.
# Additionally you will have to set -e JAVA_DEBUG=true and -e JAVA_DEBUG_PORT=*:5005
# when running the container
#
# Then run the container using :
#
# docker run -i --rm -p 8080:8080 quarkus/quarkus-websocket-jvm
#
# This image uses the \`run-java.sh\` script to run the application.
# This scripts computes the command line to execute your Java application, and
# includes memory/GC tuning.
# You can configure the behavior using the following environment properties:
# - JAVA_OPTS: JVM options passed to the \`java\` command (example: \\"-verbose:class\\") - Be aware that this will override
# the default JVM options, use \`JAVA_OPTS_APPEND\` to append options
# - JAVA_OPTS_APPEND: User specified Java options to be appended to generated options
#   in JAVA_OPTS (example: \\"-Dsome.property=foo\\")
# - JAVA_MAX_MEM_RATIO: Is used when no \`-Xmx\` option is given in JAVA_OPTS. This is
#   used to calculate a default maximal heap memory based on a containers restriction.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then \`-Xmx\` is set to a ratio
#   of the container available memory as set here. The default is \`50\` which means 50%
#   of the available memory is used as an upper boundary. You can skip this mechanism by
#   setting this value to \`0\` in which case no \`-Xmx\` option is added.
# - JAVA_INITIAL_MEM_RATIO: Is used when no \`-Xms\` option is given in JAVA_OPTS. This
#   is used to calculate a default initial heap memory based on the maximum heap memory.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then \`-Xms\` is set to a ratio
#   of the \`-Xmx\` memory as set here. The default is \`25\` which means 25% of the \`-Xmx\`
#   is used as the initial heap size. You can skip this mechanism by setting this value
#   to \`0\` in which case no \`-Xms\` option is added (example: \\"25\\")
# - JAVA_MAX_INITIAL_MEM: Is used when no \`-Xms\` option is given in JAVA_OPTS.
#   This is used to calculate the maximum value of the initial heap memory. If used in
#   a container without any memory constraints for the container then this option has
#   no effect. If there is a memory constraint then \`-Xms\` is limited to the value set
#   here. The default is 4096MB which means the calculated value of \`-Xms\` never will
#   be greater than 4096MB. The value of this variable is expressed in MB (example: \\"4096\\")
# - JAVA_DIAGNOSTICS: Set this to get some diagnostics information to standard output
#   when things are happening. This option, if set to true, will set
#  \`-XX:+UnlockDiagnosticVMOptions\`. Disabled by default (example: \\"true\\").
# - JAVA_DEBUG: If set remote debugging will be switched on. Disabled by default (example:
#    true\\").
# - JAVA_DEBUG_PORT: Port used for remote debugging. Defaults to 5005 (example: \\"8787\\").
# - CONTAINER_CORE_LIMIT: A calculated core limit as described in
#   https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt. (example: \\"2\\")
# - CONTAINER_MAX_MEMORY: Memory limit given to the container (example: \\"1024\\").
# - GC_MIN_HEAP_FREE_RATIO: Minimum percentage of heap free after GC to avoid expansion.
#   (example: \\"20\\")
# - GC_MAX_HEAP_FREE_RATIO: Maximum percentage of heap free after GC to avoid shrinking.
#   (example: \\"40\\")
# - GC_TIME_RATIO: Specifies the ratio of the time spent outside the garbage collection.
#   (example: \\"4\\")
# - GC_ADAPTIVE_SIZE_POLICY_WEIGHT: The weighting given to the current GC time versus
#   previous GC times. (example: \\"90\\")
# - GC_METASPACE_SIZE: The initial metaspace size. (example: \\"20\\")
# - GC_MAX_METASPACE_SIZE: The maximum metaspace size. (example: \\"100\\")
# - GC_CONTAINER_OPTIONS: Specify Java GC to use. The value of this variable should
#   contain the necessary JRE command-line options to specify the required GC, which
#   will override the default of \`-XX:+UseParallelGC\` (example: -XX:+UseG1GC).
# - HTTPS_PROXY: The location of the https proxy. (example: \\"myuser@127.0.0.1:8080\\")
# - HTTP_PROXY: The location of the http proxy. (example: \\"myuser@127.0.0.1:8080\\")
# - NO_PROXY: A comma separated lists of hosts, IP addresses or domains that can be
#   accessed directly. (example: \\"foo.example.com,bar.example.com\\")
#
###
FROM registry.access.redhat.com/ubi9/openjdk-21:1.21

ENV LANGUAGE='en_US:en'


# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=185 target/quarkus-app/*.jar /deployments/
COPY --chown=185 target/quarkus-app/app/ /deployments/app/
COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 185
ENV JAVA_OPTS_APPEND=\\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\\"
ENV JAVA_APP_JAR=\\"/deployments/quarkus-run.jar\\"

ENTRYPOINT [ \\"/opt/jboss/container/java/run/run-java.sh\\" ]

"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: HoppscotchEchoWebSocketClient.java 1`] = `
"//////////////////////////////////////////////////
//
// Hoppscotch Echo WebSocket Client - 1.0.0
// Protocol: wss
// Host: echo-websocket.hoppscotch.io
//
//////////////////////////////////////////////////


package com.asyncapi;

import io.quarkus.websockets.next.WebSocketClient;
import io.quarkus.websockets.next.WebSocketClientConnection;
import io.quarkus.websockets.next.OnOpen;
import io.quarkus.websockets.next.OnClose;
import io.quarkus.websockets.next.OnError;
import io.quarkus.websockets.next.OnTextMessage;
import io.quarkus.websockets.next.CloseReason;
import jakarta.inject.Inject;
import io.quarkus.logging.Log;

@WebSocketClient(path = \\"/\\")  
public class HoppscotchEchoWebSocketClient{

  @Inject
  WebSocketClientConnection connection;

  @OnOpen
  public void onOpen() {
      String broadcastMessage = \\"Echo called from Hoppscotch Echo WebSocket Client server\\";
      Log.info(\\"Connected to Hoppscotch Echo WebSocket Client server\\");
      Log.info(broadcastMessage);
  }

  @OnTextMessage
  public void sendEchoMessage(String message, WebSocketClientConnection connection) {
      Log.info(\\"Received text message: \\" + message);
  }

  @OnError
  public void onError(Throwable throwable) {
      Log.error(\\"Websocket connection error: \\" + throwable.getMessage());
  }



  @OnClose
   public void onClose(CloseReason reason, WebSocketClientConnection connection) {
      int code = reason.getCode();
      Log.info(\\"Websocket disconnected from Hoppscotch Echo WebSocket Client with Close code: \\" + code);
  }
}


"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: HoppscotchEchoWebSocketClientConnector.java 1`] = `
"
package com.asyncapi;

import io.quarkus.websockets.next.WebSocketConnector;
import io.quarkus.websockets.next.WebSocketClientConnection;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.annotation.PostConstruct;
import io.quarkus.logging.Log;
import io.quarkus.runtime.Startup;

  @Startup
  @Singleton  
  public class HoppscotchEchoWebSocketClientConnector{

    @Inject
    WebSocketConnector<HoppscotchEchoWebSocketClient> connector;



    @PostConstruct
    void openAndSendMessagesWithDelay() {
        new Thread(() -> {
            try {
                Log.info(\\"Starting WebSocket connection attempt...\\");
                WebSocketClientConnection connection = connector.connectAndAwait();

                // Wait 2 seconds before first message
                Thread.sleep(2000);

                // Send 5 messages
                for (int i = 1; i <= 5; i++) {
                    String msg = \\"Message #\\" + i + \\" from Quarkus\\";
                    connection.sendTextAndAwait(msg);
                    Log.info(\\"Sent: \\" + msg);
                    Thread.sleep(5000);
                }

                // Wait 10 seconds after final message
                Log.info(\\"All messages sent. Waiting 10 seconds before closing...\\");
                Thread.sleep(10000);

                connection.closeAndAwait();
                Log.info(\\"Connection closed gracefully.\\");

            } catch (Exception e) {
                Log.error(\\"Error during WebSocket communication\\", e);
            }
        }).start();
    }
  }



"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: MavenWrapperDownloader.java 1`] = `
"/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * \\"License\\"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.IOException;
import java.io.InputStream;
import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.net.URI;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.concurrent.ThreadLocalRandom;

public final class MavenWrapperDownloader {
    private static final String WRAPPER_VERSION = \\"3.3.2\\";

    private static final boolean VERBOSE = Boolean.parseBoolean(System.getenv(\\"MVNW_VERBOSE\\"));

    public static void main(String[] args) {
        log(\\"Apache Maven Wrapper Downloader \\" + WRAPPER_VERSION);

        if (args.length != 2) {
            System.err.println(\\" - ERROR wrapperUrl or wrapperJarPath parameter missing\\");
            System.exit(1);
        }

        try {
            log(\\" - Downloader started\\");
            final URL wrapperUrl = URI.create(args[0]).toURL();
            final String jarPath = args[1].replace(\\"..\\", \\"\\"); // Sanitize path
            final Path wrapperJarPath = Paths.get(jarPath).toAbsolutePath().normalize();
            downloadFileFromURL(wrapperUrl, wrapperJarPath);
            log(\\"Done\\");
        } catch (IOException e) {
            System.err.println(\\"- Error downloading: \\" + e.getMessage());
            if (VERBOSE) {
                e.printStackTrace();
            }
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(URL wrapperUrl, Path wrapperJarPath)
            throws IOException {
        log(\\" - Downloading to: \\" + wrapperJarPath);
        if (System.getenv(\\"MVNW_USERNAME\\") != null && System.getenv(\\"MVNW_PASSWORD\\") != null) {
            final String username = System.getenv(\\"MVNW_USERNAME\\");
            final char[] password = System.getenv(\\"MVNW_PASSWORD\\").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        Path temp = wrapperJarPath
                .getParent()
                .resolve(wrapperJarPath.getFileName() + \\".\\"
                        + Long.toUnsignedString(ThreadLocalRandom.current().nextLong()) + \\".tmp\\");
        try (InputStream inStream = wrapperUrl.openStream()) {
            Files.copy(inStream, temp, StandardCopyOption.REPLACE_EXISTING);
            Files.move(temp, wrapperJarPath, StandardCopyOption.REPLACE_EXISTING);
        } finally {
            Files.deleteIfExists(temp);
        }
        log(\\" - Downloader complete\\");
    }

    private static void log(String msg) {
        if (VERBOSE) {
            System.out.println(msg);
        }
    }

}
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: README.md 1`] = `
"# quarkus-websocket

This project uses Quarkus, the Supersonic Subatomic Java Framework.

If you want to learn more about Quarkus, please visit its website: <https://quarkus.io/>.

## Running the application in dev mode

You can run your application in dev mode that enables live coding using:

\`\`\`shell script
./mvnw quarkus:dev
\`\`\`

> **_NOTE:_**  Quarkus now ships with a Dev UI, which is available in dev mode only at <http://localhost:8080/q/dev/>.

## Packaging and running the application

The application can be packaged using:

\`\`\`shell script
./mvnw package
\`\`\`

It produces the \`quarkus-run.jar\` file in the \`target/quarkus-app/\` directory.
Be aware that it’s not an _über-jar_ as the dependencies are copied into the \`target/quarkus-app/lib/\` directory.

The application is now runnable using \`java -jar target/quarkus-app/quarkus-run.jar\`.

If you want to build an _über-jar_, execute the following command:

\`\`\`shell script
./mvnw package -Dquarkus.package.jar.type=uber-jar
\`\`\`

The application, packaged as an _über-jar_, is now runnable using \`java -jar target/*-runner.jar\`.

## Creating a native executable

You can create a native executable using:

\`\`\`shell script
./mvnw package -Dnative
\`\`\`

Or, if you don't have GraalVM installed, you can run the native executable build in a container using:

\`\`\`shell script
./mvnw package -Dnative -Dquarkus.native.container-build=true
\`\`\`

 You can then execute your native executable with: \`./target/quarkus-websocket-1.0.0-SNAPSHOT-runner\`

If you want to learn more about building native executables, please consult <https://quarkus.io/guides/maven-tooling>.

## Related Guides

- WebSockets Next ([guide](https://quarkus.io/guides/websockets-next-reference)): Implementation of the WebSocket API with enhanced efficiency and usability
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: application.properties 1`] = `
"# application.properties

# Define a named base-uri for HoppscotchEchoWebSocketClient
com.asyncapi.HoppscotchEchoWebSocketClient.base-uri=wss://echo-websocket.hoppscotch.io
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: maven-wrapper.properties 1`] = `
"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \\"License\\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=source
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: mvnw 1`] = `
"#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \\"License\\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z \\"$MAVEN_SKIP_RC\\" ]; then

  if [ -f /usr/local/etc/mavenrc ]; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ]; then
    . /etc/mavenrc
  fi

  if [ -f \\"$HOME/.mavenrc\\" ]; then
    . \\"$HOME/.mavenrc\\"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false
darwin=false
mingw=false
case \\"$(uname)\\" in
CYGWIN*) cygwin=true ;;
MINGW*) mingw=true ;;
Darwin*)
  darwin=true
  # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
  # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
  if [ -z \\"$JAVA_HOME\\" ]; then
    if [ -x \\"/usr/libexec/java_home\\" ]; then
      JAVA_HOME=\\"$(/usr/libexec/java_home)\\"
      export JAVA_HOME
    else
      JAVA_HOME=\\"/Library/Java/Home\\"
      export JAVA_HOME
    fi
  fi
  ;;
esac

if [ -z \\"$JAVA_HOME\\" ]; then
  if [ -r /etc/gentoo-release ]; then
    JAVA_HOME=$(java-config --jre-home)
  fi
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin; then
  [ -n \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=$(cygpath --unix \\"$JAVA_HOME\\")
  [ -n \\"$CLASSPATH\\" ] \\\\
    && CLASSPATH=$(cygpath --path --unix \\"$CLASSPATH\\")
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw; then
  [ -n \\"$JAVA_HOME\\" ] && [ -d \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=\\"$(
      cd \\"$JAVA_HOME\\" || (
        echo \\"cannot cd into $JAVA_HOME.\\" >&2
        exit 1
      )
      pwd
    )\\"
fi

if [ -z \\"$JAVA_HOME\\" ]; then
  javaExecutable=\\"$(which javac)\\"
  if [ -n \\"$javaExecutable\\" ] && ! [ \\"$(expr \\"$javaExecutable\\" : '\\\\([^ ]*\\\\)')\\" = \\"no\\" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=$(which readlink)
    if [ ! \\"$(expr \\"$readLink\\" : '\\\\([^ ]*\\\\)')\\" = \\"no\\" ]; then
      if $darwin; then
        javaHome=\\"$(dirname \\"$javaExecutable\\")\\"
        javaExecutable=\\"$(cd \\"$javaHome\\" && pwd -P)/javac\\"
      else
        javaExecutable=\\"$(readlink -f \\"$javaExecutable\\")\\"
      fi
      javaHome=\\"$(dirname \\"$javaExecutable\\")\\"
      javaHome=$(expr \\"$javaHome\\" : '\\\\(.*\\\\)/bin')
      JAVA_HOME=\\"$javaHome\\"
      export JAVA_HOME
    fi
  fi
fi

if [ -z \\"$JAVACMD\\" ]; then
  if [ -n \\"$JAVA_HOME\\" ]; then
    if [ -x \\"$JAVA_HOME/jre/sh/java\\" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD=\\"$JAVA_HOME/jre/sh/java\\"
    else
      JAVACMD=\\"$JAVA_HOME/bin/java\\"
    fi
  else
    JAVACMD=\\"$(
      \\\\unset -f command 2>/dev/null
      \\\\command -v java
    )\\"
  fi
fi

if [ ! -x \\"$JAVACMD\\" ]; then
  echo \\"Error: JAVA_HOME is not defined correctly.\\" >&2
  echo \\"  We cannot execute $JAVACMD\\" >&2
  exit 1
fi

if [ -z \\"$JAVA_HOME\\" ]; then
  echo \\"Warning: JAVA_HOME environment variable is not set.\\" >&2
fi

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {
  if [ -z \\"$1\\" ]; then
    echo \\"Path not specified to find_maven_basedir\\" >&2
    return 1
  fi

  basedir=\\"$1\\"
  wdir=\\"$1\\"
  while [ \\"$wdir\\" != '/' ]; do
    if [ -d \\"$wdir\\"/.mvn ]; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d \\"\${wdir}\\" ]; then
      wdir=$(
        cd \\"$wdir/..\\" || exit 1
        pwd
      )
    fi
    # end of workaround
  done
  printf '%s' \\"$(
    cd \\"$basedir\\" || exit 1
    pwd
  )\\"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f \\"$1\\" ]; then
    # Remove \\\\r in case we run on Windows within Git Bash
    # and check out the repository with auto CRLF management
    # enabled. Otherwise, we may read lines that are delimited with
    # \\\\r\\\\n and produce $'-Xarg\\\\r' rather than -Xarg due to word
    # splitting rules.
    tr -s '\\\\r\\\\n' ' ' <\\"$1\\"
  fi
}

log() {
  if [ \\"$MVNW_VERBOSE\\" = true ]; then
    printf '%s\\\\n' \\"$1\\"
  fi
}

BASE_DIR=$(find_maven_basedir \\"$(dirname \\"$0\\")\\")
if [ -z \\"$BASE_DIR\\" ]; then
  exit 1
fi

MAVEN_PROJECTBASEDIR=\${MAVEN_BASEDIR:-\\"$BASE_DIR\\"}
export MAVEN_PROJECTBASEDIR
log \\"$MAVEN_PROJECTBASEDIR\\"

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
wrapperJarPath=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\\"
if [ -r \\"$wrapperJarPath\\" ]; then
  log \\"Found $wrapperJarPath\\"
else
  log \\"Couldn't find $wrapperJarPath, downloading it ...\\"

  if [ -n \\"$MVNW_REPOURL\\" ]; then
    wrapperUrl=\\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
  else
    wrapperUrl=\\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
  fi
  while IFS=\\"=\\" read -r key value; do
    # Remove '\\\\r' from value to allow usage on windows as IFS does not consider '\\\\r' as a separator ( considers space, tab, new line ('\\\\n'), and custom '=' )
    safeValue=$(echo \\"$value\\" | tr -d '\\\\r')
    case \\"$key\\" in wrapperUrl)
      wrapperUrl=\\"$safeValue\\"
      break
      ;;
    esac
  done <\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\\"
  log \\"Downloading from: $wrapperUrl\\"

  if $cygwin; then
    wrapperJarPath=$(cygpath --path --windows \\"$wrapperJarPath\\")
  fi

  if command -v wget >/dev/null; then
    log \\"Found wget ... using wget\\"
    [ \\"$MVNW_VERBOSE\\" = true ] && QUIET=\\"\\" || QUIET=\\"--quiet\\"
    if [ -z \\"$MVNW_USERNAME\\" ] || [ -z \\"$MVNW_PASSWORD\\" ]; then
      wget $QUIET \\"$wrapperUrl\\" -O \\"$wrapperJarPath\\" || rm -f \\"$wrapperJarPath\\"
    else
      wget $QUIET --http-user=\\"$MVNW_USERNAME\\" --http-password=\\"$MVNW_PASSWORD\\" \\"$wrapperUrl\\" -O \\"$wrapperJarPath\\" || rm -f \\"$wrapperJarPath\\"
    fi
  elif command -v curl >/dev/null; then
    log \\"Found curl ... using curl\\"
    [ \\"$MVNW_VERBOSE\\" = true ] && QUIET=\\"\\" || QUIET=\\"--silent\\"
    if [ -z \\"$MVNW_USERNAME\\" ] || [ -z \\"$MVNW_PASSWORD\\" ]; then
      curl $QUIET -o \\"$wrapperJarPath\\" \\"$wrapperUrl\\" -f -L || rm -f \\"$wrapperJarPath\\"
    else
      curl $QUIET --user \\"$MVNW_USERNAME:$MVNW_PASSWORD\\" -o \\"$wrapperJarPath\\" \\"$wrapperUrl\\" -f -L || rm -f \\"$wrapperJarPath\\"
    fi
  else
    log \\"Falling back to using Java to download\\"
    javaSource=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java\\"
    javaClass=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class\\"
    # For Cygwin, switch paths to Windows format before running javac
    if $cygwin; then
      javaSource=$(cygpath --path --windows \\"$javaSource\\")
      javaClass=$(cygpath --path --windows \\"$javaClass\\")
    fi
    if [ -e \\"$javaSource\\" ]; then
      if [ ! -e \\"$javaClass\\" ]; then
        log \\" - Compiling MavenWrapperDownloader.java ...\\"
        (\\"$JAVA_HOME/bin/javac\\" \\"$javaSource\\")
      fi
      if [ -e \\"$javaClass\\" ]; then
        log \\" - Running MavenWrapperDownloader.java ...\\"
        (\\"$JAVA_HOME/bin/java\\" -cp .mvn/wrapper MavenWrapperDownloader \\"$wrapperUrl\\" \\"$wrapperJarPath\\") || rm -f \\"$wrapperJarPath\\"
      fi
    fi
  fi
fi
##########################################################################################
# End of extension
##########################################################################################

# If specified, validate the SHA-256 sum of the Maven wrapper jar file
wrapperSha256Sum=\\"\\"
while IFS=\\"=\\" read -r key value; do
  case \\"$key\\" in wrapperSha256Sum)
    wrapperSha256Sum=$value
    break
    ;;
  esac
done <\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\\"
if [ -n \\"$wrapperSha256Sum\\" ]; then
  wrapperSha256Result=false
  if command -v sha256sum >/dev/null; then
    if echo \\"$wrapperSha256Sum  $wrapperJarPath\\" | sha256sum -c >/dev/null 2>&1; then
      wrapperSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo \\"$wrapperSha256Sum  $wrapperJarPath\\" | shasum -a 256 -c >/dev/null 2>&1; then
      wrapperSha256Result=true
    fi
  else
    echo \\"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\\" >&2
    echo \\"Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties.\\" >&2
    exit 1
  fi
  if [ $wrapperSha256Result = false ]; then
    echo \\"Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.\\" >&2
    echo \\"Investigate or delete $wrapperJarPath to attempt a clean download.\\" >&2
    echo \\"If you updated your Maven version, you need to update the specified wrapperSha256Sum property.\\" >&2
    exit 1
  fi
fi

MAVEN_OPTS=\\"$(concat_lines \\"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\\") $MAVEN_OPTS\\"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=$(cygpath --path --windows \\"$JAVA_HOME\\")
  [ -n \\"$CLASSPATH\\" ] \\\\
    && CLASSPATH=$(cygpath --path --windows \\"$CLASSPATH\\")
  [ -n \\"$MAVEN_PROJECTBASEDIR\\" ] \\\\
    && MAVEN_PROJECTBASEDIR=$(cygpath --path --windows \\"$MAVEN_PROJECTBASEDIR\\")
fi

# Provide a \\"standardized\\" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS=\\"$MAVEN_CONFIG $*\\"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

# shellcheck disable=SC2086 # safe args
exec \\"$JAVACMD\\" \\\\
  $MAVEN_OPTS \\\\
  $MAVEN_DEBUG_OPTS \\\\
  -classpath \\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\\" \\\\
  \\"-Dmaven.multiModuleProjectDirectory=\${MAVEN_PROJECTBASEDIR}\\" \\\\
  \${WRAPPER_LAUNCHER} $MAVEN_CONFIG \\"$@\\"
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: mvnw.cmd 1`] = `
"@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM \\"License\\"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if \\"%MAVEN_BATCH_ECHO%\\" == \\"on\\"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if \\"%HOME%\\" == \\"\\" (set \\"HOME=%HOMEDRIVE%%HOMEPATH%\\")

@REM Execute a user defined script before this one
if not \\"%MAVEN_SKIP_RC%\\" == \\"\\" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist \\"%USERPROFILE%\\\\mavenrc_pre.bat\\" call \\"%USERPROFILE%\\\\mavenrc_pre.bat\\" %*
if exist \\"%USERPROFILE%\\\\mavenrc_pre.cmd\\" call \\"%USERPROFILE%\\\\mavenrc_pre.cmd\\" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not \\"%JAVA_HOME%\\" == \\"\\" goto OkJHome

echo. >&2
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo. >&2
goto error

:OkJHome
if exist \\"%JAVA_HOME%\\\\bin\\\\java.exe\\" goto init

echo. >&2
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = \\"%JAVA_HOME%\\" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo. >&2
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder \\".mvn\\".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT \\"%MAVEN_PROJECTBASEDIR%\\"==\\"\\" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST \\"%WDIR%\\"\\\\.mvn goto baseDirFound
cd ..
IF \\"%WDIR%\\"==\\"%CD%\\" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd \\"%EXEC_DIR%\\"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd \\"%EXEC_DIR%\\"

:endDetectBaseDir

IF NOT EXIST \\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\jvm.config\\" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F \\"usebackq delims=\\" %%a in (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\jvm.config\\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE=\\"%JAVA_HOME%\\\\bin\\\\java.exe\\"
set WRAPPER_JAR=\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.jar\\"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set WRAPPER_URL=\\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"

FOR /F \\"usebackq tokens=1,2 delims==\\" %%A IN (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.properties\\") DO (
    IF \\"%%A\\"==\\"wrapperUrl\\" SET WRAPPER_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not \\"%MVNW_REPOURL%\\" == \\"\\" (
        SET WRAPPER_URL=\\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
    )
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %WRAPPER_URL%
    )

    powershell -Command \\"&{\\"^
		\\"$webclient = new-object System.Net.WebClient;\\"^
		\\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\\"^
		\\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\\"^
		\\"}\\"^
		\\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')\\"^
		\\"}\\"
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file
SET WRAPPER_SHA_256_SUM=\\"\\"
FOR /F \\"usebackq tokens=1,2 delims==\\" %%A IN (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.properties\\") DO (
    IF \\"%%A\\"==\\"wrapperSha256Sum\\" SET WRAPPER_SHA_256_SUM=%%B
)
IF NOT %WRAPPER_SHA_256_SUM%==\\"\\" (
    powershell -Command \\"&{\\"^
       \\"Import-Module $PSHOME\\\\Modules\\\\Microsoft.PowerShell.Utility -Function Get-FileHash;\\"^
       \\"$hash = (Get-FileHash \\\\\\"%WRAPPER_JAR%\\\\\\" -Algorithm SHA256).Hash.ToLower();\\"^
       \\"If('%WRAPPER_SHA_256_SUM%' -ne $hash){\\"^
       \\"  Write-Error 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';\\"^
       \\"  Write-Error 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';\\"^
       \\"  Write-Error 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';\\"^
       \\"  exit 1;\\"^
       \\"}\\"^
       \\"}\\"
    if ERRORLEVEL 1 goto error
)

@REM Provide a \\"standardized\\" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  \\"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\\" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not \\"%MAVEN_SKIP_RC%\\"==\\"\\" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist \\"%USERPROFILE%\\\\mavenrc_post.bat\\" call \\"%USERPROFILE%\\\\mavenrc_post.bat\\"
if exist \\"%USERPROFILE%\\\\mavenrc_post.cmd\\" call \\"%USERPROFILE%\\\\mavenrc_post.cmd\\"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if \\"%MAVEN_BATCH_PAUSE%\\"==\\"on\\" pause

if \\"%MAVEN_TERMINATE_CMD%\\"==\\"on\\" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for hoppscotch echo: pom.xml 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.asyncapi</groupId>
    <artifactId>quarkus-websocket</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>
        <compiler-plugin.version>3.14.0</compiler-plugin.version>
        <maven.compiler.release>21</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
        <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
        <quarkus.platform.version>3.23.0</quarkus.platform.version>
        <skipITs>true</skipITs>
        <surefire-plugin.version>3.5.2</surefire-plugin.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>\${quarkus.platform.group-id}</groupId>
                <artifactId>\${quarkus.platform.artifact-id}</artifactId>
                <version>\${quarkus.platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-websockets-next</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>\${quarkus.platform.group-id}</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <version>\${quarkus.platform.version}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                            <goal>generate-code</goal>
                            <goal>generate-code-tests</goal>
                            <goal>native-image-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>\${compiler-plugin.version}</version>
                <configuration>
                    <parameters>true</parameters>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>\${surefire-plugin.version}</version>
                <configuration>
                    <systemPropertyVariables>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>\${maven.home}</maven.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>\${surefire-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <native.image.path>\${project.build.directory}/\${project.build.finalName}-runner</native.image.path>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>\${maven.home}</maven.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>native</id>
            <activation>
                <property>
                    <name>native</name>
                </property>
            </activation>
            <properties>
                <skipITs>false</skipITs>
                <quarkus.native.enabled>true</quarkus.native.enabled>
            </properties>
        </profile>
    </profiles>
</project>
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: .dockerignore 1`] = `
"*
!target/*-runner
!target/*-runner.jar
!target/lib/*
!target/quarkus-app/*"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: .gitignore 1`] = `
"#Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
release.properties
.flattened-pom.xml

# Eclipse
.project
.classpath
.settings/
bin/

# IntelliJ
.idea
*.ipr
*.iml
*.iws

# NetBeans
nb-configuration.xml

# Visual Studio Code
.vscode
.factorypath

# OSX
.DS_Store

# Vim
*.swp
*.swo

# patch
*.orig
*.rej

# Local environment
.env

# Plugin directory
/.quarkus/cli/plugins/
# TLS Certificates
.certs/
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: .gitignore 2`] = `
"maven-wrapper.jar
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: Dockerfile.jvm 1`] = `
"####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the container image run:
#
# ./mvnw package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/quarkus-websocket-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/quarkus-websocket-jvm
#
# If you want to include the debug port into your docker image
# you will have to expose the debug port (default 5005 being the default) like this :  EXPOSE 8080 5005.
# Additionally you will have to set -e JAVA_DEBUG=true and -e JAVA_DEBUG_PORT=*:5005
# when running the container
#
# Then run the container using :
#
# docker run -i --rm -p 8080:8080 quarkus/quarkus-websocket-jvm
#
# This image uses the \`run-java.sh\` script to run the application.
# This scripts computes the command line to execute your Java application, and
# includes memory/GC tuning.
# You can configure the behavior using the following environment properties:
# - JAVA_OPTS: JVM options passed to the \`java\` command (example: \\"-verbose:class\\") - Be aware that this will override
# the default JVM options, use \`JAVA_OPTS_APPEND\` to append options
# - JAVA_OPTS_APPEND: User specified Java options to be appended to generated options
#   in JAVA_OPTS (example: \\"-Dsome.property=foo\\")
# - JAVA_MAX_MEM_RATIO: Is used when no \`-Xmx\` option is given in JAVA_OPTS. This is
#   used to calculate a default maximal heap memory based on a containers restriction.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then \`-Xmx\` is set to a ratio
#   of the container available memory as set here. The default is \`50\` which means 50%
#   of the available memory is used as an upper boundary. You can skip this mechanism by
#   setting this value to \`0\` in which case no \`-Xmx\` option is added.
# - JAVA_INITIAL_MEM_RATIO: Is used when no \`-Xms\` option is given in JAVA_OPTS. This
#   is used to calculate a default initial heap memory based on the maximum heap memory.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then \`-Xms\` is set to a ratio
#   of the \`-Xmx\` memory as set here. The default is \`25\` which means 25% of the \`-Xmx\`
#   is used as the initial heap size. You can skip this mechanism by setting this value
#   to \`0\` in which case no \`-Xms\` option is added (example: \\"25\\")
# - JAVA_MAX_INITIAL_MEM: Is used when no \`-Xms\` option is given in JAVA_OPTS.
#   This is used to calculate the maximum value of the initial heap memory. If used in
#   a container without any memory constraints for the container then this option has
#   no effect. If there is a memory constraint then \`-Xms\` is limited to the value set
#   here. The default is 4096MB which means the calculated value of \`-Xms\` never will
#   be greater than 4096MB. The value of this variable is expressed in MB (example: \\"4096\\")
# - JAVA_DIAGNOSTICS: Set this to get some diagnostics information to standard output
#   when things are happening. This option, if set to true, will set
#  \`-XX:+UnlockDiagnosticVMOptions\`. Disabled by default (example: \\"true\\").
# - JAVA_DEBUG: If set remote debugging will be switched on. Disabled by default (example:
#    true\\").
# - JAVA_DEBUG_PORT: Port used for remote debugging. Defaults to 5005 (example: \\"8787\\").
# - CONTAINER_CORE_LIMIT: A calculated core limit as described in
#   https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt. (example: \\"2\\")
# - CONTAINER_MAX_MEMORY: Memory limit given to the container (example: \\"1024\\").
# - GC_MIN_HEAP_FREE_RATIO: Minimum percentage of heap free after GC to avoid expansion.
#   (example: \\"20\\")
# - GC_MAX_HEAP_FREE_RATIO: Maximum percentage of heap free after GC to avoid shrinking.
#   (example: \\"40\\")
# - GC_TIME_RATIO: Specifies the ratio of the time spent outside the garbage collection.
#   (example: \\"4\\")
# - GC_ADAPTIVE_SIZE_POLICY_WEIGHT: The weighting given to the current GC time versus
#   previous GC times. (example: \\"90\\")
# - GC_METASPACE_SIZE: The initial metaspace size. (example: \\"20\\")
# - GC_MAX_METASPACE_SIZE: The maximum metaspace size. (example: \\"100\\")
# - GC_CONTAINER_OPTIONS: Specify Java GC to use. The value of this variable should
#   contain the necessary JRE command-line options to specify the required GC, which
#   will override the default of \`-XX:+UseParallelGC\` (example: -XX:+UseG1GC).
# - HTTPS_PROXY: The location of the https proxy. (example: \\"myuser@127.0.0.1:8080\\")
# - HTTP_PROXY: The location of the http proxy. (example: \\"myuser@127.0.0.1:8080\\")
# - NO_PROXY: A comma separated lists of hosts, IP addresses or domains that can be
#   accessed directly. (example: \\"foo.example.com,bar.example.com\\")
#
###
FROM registry.access.redhat.com/ubi9/openjdk-21:1.21

ENV LANGUAGE='en_US:en'


# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=185 target/quarkus-app/*.jar /deployments/
COPY --chown=185 target/quarkus-app/app/ /deployments/app/
COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 185
ENV JAVA_OPTS_APPEND=\\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\\"
ENV JAVA_APP_JAR=\\"/deployments/quarkus-run.jar\\"

ENTRYPOINT [ \\"/opt/jboss/container/java/run/run-java.sh\\" ]

"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: MavenWrapperDownloader.java 1`] = `
"/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * \\"License\\"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.IOException;
import java.io.InputStream;
import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.net.URI;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.concurrent.ThreadLocalRandom;

public final class MavenWrapperDownloader {
    private static final String WRAPPER_VERSION = \\"3.3.2\\";

    private static final boolean VERBOSE = Boolean.parseBoolean(System.getenv(\\"MVNW_VERBOSE\\"));

    public static void main(String[] args) {
        log(\\"Apache Maven Wrapper Downloader \\" + WRAPPER_VERSION);

        if (args.length != 2) {
            System.err.println(\\" - ERROR wrapperUrl or wrapperJarPath parameter missing\\");
            System.exit(1);
        }

        try {
            log(\\" - Downloader started\\");
            final URL wrapperUrl = URI.create(args[0]).toURL();
            final String jarPath = args[1].replace(\\"..\\", \\"\\"); // Sanitize path
            final Path wrapperJarPath = Paths.get(jarPath).toAbsolutePath().normalize();
            downloadFileFromURL(wrapperUrl, wrapperJarPath);
            log(\\"Done\\");
        } catch (IOException e) {
            System.err.println(\\"- Error downloading: \\" + e.getMessage());
            if (VERBOSE) {
                e.printStackTrace();
            }
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(URL wrapperUrl, Path wrapperJarPath)
            throws IOException {
        log(\\" - Downloading to: \\" + wrapperJarPath);
        if (System.getenv(\\"MVNW_USERNAME\\") != null && System.getenv(\\"MVNW_PASSWORD\\") != null) {
            final String username = System.getenv(\\"MVNW_USERNAME\\");
            final char[] password = System.getenv(\\"MVNW_PASSWORD\\").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        Path temp = wrapperJarPath
                .getParent()
                .resolve(wrapperJarPath.getFileName() + \\".\\"
                        + Long.toUnsignedString(ThreadLocalRandom.current().nextLong()) + \\".tmp\\");
        try (InputStream inStream = wrapperUrl.openStream()) {
            Files.copy(inStream, temp, StandardCopyOption.REPLACE_EXISTING);
            Files.move(temp, wrapperJarPath, StandardCopyOption.REPLACE_EXISTING);
        } finally {
            Files.deleteIfExists(temp);
        }
        log(\\" - Downloader complete\\");
    }

    private static void log(String msg) {
        if (VERBOSE) {
            System.out.println(msg);
        }
    }

}
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: PostmanEchoWebSocketClientClient.java 1`] = `
"//////////////////////////////////////////////////
//
// Postman Echo WebSocket Client - 1.0.0
// Protocol: wss
// Host: ws.postman-echo.com
// Path: /raw
//
//////////////////////////////////////////////////


package com.asyncapi;

import io.quarkus.websockets.next.WebSocketClient;
import io.quarkus.websockets.next.WebSocketClientConnection;
import io.quarkus.websockets.next.OnOpen;
import io.quarkus.websockets.next.OnClose;
import io.quarkus.websockets.next.OnError;
import io.quarkus.websockets.next.OnTextMessage;
import io.quarkus.websockets.next.CloseReason;
import jakarta.inject.Inject;
import io.quarkus.logging.Log;

@WebSocketClient(path = \\"/raw\\")  
public class PostmanEchoWebSocketClientClient{

  @Inject
  WebSocketClientConnection connection;

  @OnOpen
  public void onOpen() {
      String broadcastMessage = \\"Echo called from Postman Echo WebSocket Client server\\";
      Log.info(\\"Connected to Postman Echo WebSocket Client server\\");
      Log.info(broadcastMessage);
  }

  @OnTextMessage
  public void sendEchoMessage(String message, WebSocketClientConnection connection) {
      Log.info(\\"Received text message: \\" + message);
  }

  @OnError
  public void onError(Throwable throwable) {
      Log.error(\\"Websocket connection error: \\" + throwable.getMessage());
  }



  @OnClose
   public void onClose(CloseReason reason, WebSocketClientConnection connection) {
      int code = reason.getCode();
      Log.info(\\"Websocket disconnected from Postman Echo WebSocket Client with Close code: \\" + code);
  }
}


"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: PostmanEchoWebSocketClientClientConnector.java 1`] = `
"
package com.asyncapi;

import io.quarkus.websockets.next.WebSocketConnector;
import io.quarkus.websockets.next.WebSocketClientConnection;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.annotation.PostConstruct;
import io.quarkus.logging.Log;
import io.quarkus.runtime.Startup;

  @Startup
  @Singleton  
  public class PostmanEchoWebSocketClientClientConnector{

    @Inject
    WebSocketConnector<PostmanEchoWebSocketClientClient> connector;



    @PostConstruct
    void openAndSendMessagesWithDelay() {
        new Thread(() -> {
            try {
                Log.info(\\"Starting WebSocket connection attempt...\\");
                WebSocketClientConnection connection = connector.connectAndAwait();

                // Wait 2 seconds before first message
                Thread.sleep(2000);

                // Send 5 messages
                for (int i = 1; i <= 5; i++) {
                    String msg = \\"Message #\\" + i + \\" from Quarkus\\";
                    connection.sendTextAndAwait(msg);
                    Log.info(\\"Sent: \\" + msg);
                    Thread.sleep(5000);
                }

                // Wait 10 seconds after final message
                Log.info(\\"All messages sent. Waiting 10 seconds before closing...\\");
                Thread.sleep(10000);

                connection.closeAndAwait();
                Log.info(\\"Connection closed gracefully.\\");

            } catch (Exception e) {
                Log.error(\\"Error during WebSocket communication\\", e);
            }
        }).start();
    }
  }



"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: README.md 1`] = `
"# quarkus-websocket

This project uses Quarkus, the Supersonic Subatomic Java Framework.

If you want to learn more about Quarkus, please visit its website: <https://quarkus.io/>.

## Running the application in dev mode

You can run your application in dev mode that enables live coding using:

\`\`\`shell script
./mvnw quarkus:dev
\`\`\`

> **_NOTE:_**  Quarkus now ships with a Dev UI, which is available in dev mode only at <http://localhost:8080/q/dev/>.

## Packaging and running the application

The application can be packaged using:

\`\`\`shell script
./mvnw package
\`\`\`

It produces the \`quarkus-run.jar\` file in the \`target/quarkus-app/\` directory.
Be aware that it’s not an _über-jar_ as the dependencies are copied into the \`target/quarkus-app/lib/\` directory.

The application is now runnable using \`java -jar target/quarkus-app/quarkus-run.jar\`.

If you want to build an _über-jar_, execute the following command:

\`\`\`shell script
./mvnw package -Dquarkus.package.jar.type=uber-jar
\`\`\`

The application, packaged as an _über-jar_, is now runnable using \`java -jar target/*-runner.jar\`.

## Creating a native executable

You can create a native executable using:

\`\`\`shell script
./mvnw package -Dnative
\`\`\`

Or, if you don't have GraalVM installed, you can run the native executable build in a container using:

\`\`\`shell script
./mvnw package -Dnative -Dquarkus.native.container-build=true
\`\`\`

 You can then execute your native executable with: \`./target/quarkus-websocket-1.0.0-SNAPSHOT-runner\`

If you want to learn more about building native executables, please consult <https://quarkus.io/guides/maven-tooling>.

## Related Guides

- WebSockets Next ([guide](https://quarkus.io/guides/websockets-next-reference)): Implementation of the WebSocket API with enhanced efficiency and usability
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: application.properties 1`] = `
"# application.properties

# Define a named base-uri for PostmanEchoWebSocketClientClient
com.asyncapi.PostmanEchoWebSocketClientClient.base-uri=wss://ws.postman-echo.com
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: maven-wrapper.properties 1`] = `
"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \\"License\\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=source
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: mvnw 1`] = `
"#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \\"License\\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z \\"$MAVEN_SKIP_RC\\" ]; then

  if [ -f /usr/local/etc/mavenrc ]; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ]; then
    . /etc/mavenrc
  fi

  if [ -f \\"$HOME/.mavenrc\\" ]; then
    . \\"$HOME/.mavenrc\\"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false
darwin=false
mingw=false
case \\"$(uname)\\" in
CYGWIN*) cygwin=true ;;
MINGW*) mingw=true ;;
Darwin*)
  darwin=true
  # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
  # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
  if [ -z \\"$JAVA_HOME\\" ]; then
    if [ -x \\"/usr/libexec/java_home\\" ]; then
      JAVA_HOME=\\"$(/usr/libexec/java_home)\\"
      export JAVA_HOME
    else
      JAVA_HOME=\\"/Library/Java/Home\\"
      export JAVA_HOME
    fi
  fi
  ;;
esac

if [ -z \\"$JAVA_HOME\\" ]; then
  if [ -r /etc/gentoo-release ]; then
    JAVA_HOME=$(java-config --jre-home)
  fi
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin; then
  [ -n \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=$(cygpath --unix \\"$JAVA_HOME\\")
  [ -n \\"$CLASSPATH\\" ] \\\\
    && CLASSPATH=$(cygpath --path --unix \\"$CLASSPATH\\")
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw; then
  [ -n \\"$JAVA_HOME\\" ] && [ -d \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=\\"$(
      cd \\"$JAVA_HOME\\" || (
        echo \\"cannot cd into $JAVA_HOME.\\" >&2
        exit 1
      )
      pwd
    )\\"
fi

if [ -z \\"$JAVA_HOME\\" ]; then
  javaExecutable=\\"$(which javac)\\"
  if [ -n \\"$javaExecutable\\" ] && ! [ \\"$(expr \\"$javaExecutable\\" : '\\\\([^ ]*\\\\)')\\" = \\"no\\" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=$(which readlink)
    if [ ! \\"$(expr \\"$readLink\\" : '\\\\([^ ]*\\\\)')\\" = \\"no\\" ]; then
      if $darwin; then
        javaHome=\\"$(dirname \\"$javaExecutable\\")\\"
        javaExecutable=\\"$(cd \\"$javaHome\\" && pwd -P)/javac\\"
      else
        javaExecutable=\\"$(readlink -f \\"$javaExecutable\\")\\"
      fi
      javaHome=\\"$(dirname \\"$javaExecutable\\")\\"
      javaHome=$(expr \\"$javaHome\\" : '\\\\(.*\\\\)/bin')
      JAVA_HOME=\\"$javaHome\\"
      export JAVA_HOME
    fi
  fi
fi

if [ -z \\"$JAVACMD\\" ]; then
  if [ -n \\"$JAVA_HOME\\" ]; then
    if [ -x \\"$JAVA_HOME/jre/sh/java\\" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD=\\"$JAVA_HOME/jre/sh/java\\"
    else
      JAVACMD=\\"$JAVA_HOME/bin/java\\"
    fi
  else
    JAVACMD=\\"$(
      \\\\unset -f command 2>/dev/null
      \\\\command -v java
    )\\"
  fi
fi

if [ ! -x \\"$JAVACMD\\" ]; then
  echo \\"Error: JAVA_HOME is not defined correctly.\\" >&2
  echo \\"  We cannot execute $JAVACMD\\" >&2
  exit 1
fi

if [ -z \\"$JAVA_HOME\\" ]; then
  echo \\"Warning: JAVA_HOME environment variable is not set.\\" >&2
fi

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {
  if [ -z \\"$1\\" ]; then
    echo \\"Path not specified to find_maven_basedir\\" >&2
    return 1
  fi

  basedir=\\"$1\\"
  wdir=\\"$1\\"
  while [ \\"$wdir\\" != '/' ]; do
    if [ -d \\"$wdir\\"/.mvn ]; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d \\"\${wdir}\\" ]; then
      wdir=$(
        cd \\"$wdir/..\\" || exit 1
        pwd
      )
    fi
    # end of workaround
  done
  printf '%s' \\"$(
    cd \\"$basedir\\" || exit 1
    pwd
  )\\"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f \\"$1\\" ]; then
    # Remove \\\\r in case we run on Windows within Git Bash
    # and check out the repository with auto CRLF management
    # enabled. Otherwise, we may read lines that are delimited with
    # \\\\r\\\\n and produce $'-Xarg\\\\r' rather than -Xarg due to word
    # splitting rules.
    tr -s '\\\\r\\\\n' ' ' <\\"$1\\"
  fi
}

log() {
  if [ \\"$MVNW_VERBOSE\\" = true ]; then
    printf '%s\\\\n' \\"$1\\"
  fi
}

BASE_DIR=$(find_maven_basedir \\"$(dirname \\"$0\\")\\")
if [ -z \\"$BASE_DIR\\" ]; then
  exit 1
fi

MAVEN_PROJECTBASEDIR=\${MAVEN_BASEDIR:-\\"$BASE_DIR\\"}
export MAVEN_PROJECTBASEDIR
log \\"$MAVEN_PROJECTBASEDIR\\"

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
wrapperJarPath=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\\"
if [ -r \\"$wrapperJarPath\\" ]; then
  log \\"Found $wrapperJarPath\\"
else
  log \\"Couldn't find $wrapperJarPath, downloading it ...\\"

  if [ -n \\"$MVNW_REPOURL\\" ]; then
    wrapperUrl=\\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
  else
    wrapperUrl=\\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
  fi
  while IFS=\\"=\\" read -r key value; do
    # Remove '\\\\r' from value to allow usage on windows as IFS does not consider '\\\\r' as a separator ( considers space, tab, new line ('\\\\n'), and custom '=' )
    safeValue=$(echo \\"$value\\" | tr -d '\\\\r')
    case \\"$key\\" in wrapperUrl)
      wrapperUrl=\\"$safeValue\\"
      break
      ;;
    esac
  done <\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\\"
  log \\"Downloading from: $wrapperUrl\\"

  if $cygwin; then
    wrapperJarPath=$(cygpath --path --windows \\"$wrapperJarPath\\")
  fi

  if command -v wget >/dev/null; then
    log \\"Found wget ... using wget\\"
    [ \\"$MVNW_VERBOSE\\" = true ] && QUIET=\\"\\" || QUIET=\\"--quiet\\"
    if [ -z \\"$MVNW_USERNAME\\" ] || [ -z \\"$MVNW_PASSWORD\\" ]; then
      wget $QUIET \\"$wrapperUrl\\" -O \\"$wrapperJarPath\\" || rm -f \\"$wrapperJarPath\\"
    else
      wget $QUIET --http-user=\\"$MVNW_USERNAME\\" --http-password=\\"$MVNW_PASSWORD\\" \\"$wrapperUrl\\" -O \\"$wrapperJarPath\\" || rm -f \\"$wrapperJarPath\\"
    fi
  elif command -v curl >/dev/null; then
    log \\"Found curl ... using curl\\"
    [ \\"$MVNW_VERBOSE\\" = true ] && QUIET=\\"\\" || QUIET=\\"--silent\\"
    if [ -z \\"$MVNW_USERNAME\\" ] || [ -z \\"$MVNW_PASSWORD\\" ]; then
      curl $QUIET -o \\"$wrapperJarPath\\" \\"$wrapperUrl\\" -f -L || rm -f \\"$wrapperJarPath\\"
    else
      curl $QUIET --user \\"$MVNW_USERNAME:$MVNW_PASSWORD\\" -o \\"$wrapperJarPath\\" \\"$wrapperUrl\\" -f -L || rm -f \\"$wrapperJarPath\\"
    fi
  else
    log \\"Falling back to using Java to download\\"
    javaSource=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java\\"
    javaClass=\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class\\"
    # For Cygwin, switch paths to Windows format before running javac
    if $cygwin; then
      javaSource=$(cygpath --path --windows \\"$javaSource\\")
      javaClass=$(cygpath --path --windows \\"$javaClass\\")
    fi
    if [ -e \\"$javaSource\\" ]; then
      if [ ! -e \\"$javaClass\\" ]; then
        log \\" - Compiling MavenWrapperDownloader.java ...\\"
        (\\"$JAVA_HOME/bin/javac\\" \\"$javaSource\\")
      fi
      if [ -e \\"$javaClass\\" ]; then
        log \\" - Running MavenWrapperDownloader.java ...\\"
        (\\"$JAVA_HOME/bin/java\\" -cp .mvn/wrapper MavenWrapperDownloader \\"$wrapperUrl\\" \\"$wrapperJarPath\\") || rm -f \\"$wrapperJarPath\\"
      fi
    fi
  fi
fi
##########################################################################################
# End of extension
##########################################################################################

# If specified, validate the SHA-256 sum of the Maven wrapper jar file
wrapperSha256Sum=\\"\\"
while IFS=\\"=\\" read -r key value; do
  case \\"$key\\" in wrapperSha256Sum)
    wrapperSha256Sum=$value
    break
    ;;
  esac
done <\\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\\"
if [ -n \\"$wrapperSha256Sum\\" ]; then
  wrapperSha256Result=false
  if command -v sha256sum >/dev/null; then
    if echo \\"$wrapperSha256Sum  $wrapperJarPath\\" | sha256sum -c >/dev/null 2>&1; then
      wrapperSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo \\"$wrapperSha256Sum  $wrapperJarPath\\" | shasum -a 256 -c >/dev/null 2>&1; then
      wrapperSha256Result=true
    fi
  else
    echo \\"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\\" >&2
    echo \\"Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties.\\" >&2
    exit 1
  fi
  if [ $wrapperSha256Result = false ]; then
    echo \\"Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.\\" >&2
    echo \\"Investigate or delete $wrapperJarPath to attempt a clean download.\\" >&2
    echo \\"If you updated your Maven version, you need to update the specified wrapperSha256Sum property.\\" >&2
    exit 1
  fi
fi

MAVEN_OPTS=\\"$(concat_lines \\"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\\") $MAVEN_OPTS\\"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n \\"$JAVA_HOME\\" ] \\\\
    && JAVA_HOME=$(cygpath --path --windows \\"$JAVA_HOME\\")
  [ -n \\"$CLASSPATH\\" ] \\\\
    && CLASSPATH=$(cygpath --path --windows \\"$CLASSPATH\\")
  [ -n \\"$MAVEN_PROJECTBASEDIR\\" ] \\\\
    && MAVEN_PROJECTBASEDIR=$(cygpath --path --windows \\"$MAVEN_PROJECTBASEDIR\\")
fi

# Provide a \\"standardized\\" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS=\\"$MAVEN_CONFIG $*\\"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

# shellcheck disable=SC2086 # safe args
exec \\"$JAVACMD\\" \\\\
  $MAVEN_OPTS \\\\
  $MAVEN_DEBUG_OPTS \\\\
  -classpath \\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\\" \\\\
  \\"-Dmaven.multiModuleProjectDirectory=\${MAVEN_PROJECTBASEDIR}\\" \\\\
  \${WRAPPER_LAUNCHER} $MAVEN_CONFIG \\"$@\\"
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: mvnw.cmd 1`] = `
"@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM \\"License\\"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if \\"%MAVEN_BATCH_ECHO%\\" == \\"on\\"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if \\"%HOME%\\" == \\"\\" (set \\"HOME=%HOMEDRIVE%%HOMEPATH%\\")

@REM Execute a user defined script before this one
if not \\"%MAVEN_SKIP_RC%\\" == \\"\\" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist \\"%USERPROFILE%\\\\mavenrc_pre.bat\\" call \\"%USERPROFILE%\\\\mavenrc_pre.bat\\" %*
if exist \\"%USERPROFILE%\\\\mavenrc_pre.cmd\\" call \\"%USERPROFILE%\\\\mavenrc_pre.cmd\\" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not \\"%JAVA_HOME%\\" == \\"\\" goto OkJHome

echo. >&2
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo. >&2
goto error

:OkJHome
if exist \\"%JAVA_HOME%\\\\bin\\\\java.exe\\" goto init

echo. >&2
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = \\"%JAVA_HOME%\\" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo. >&2
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder \\".mvn\\".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT \\"%MAVEN_PROJECTBASEDIR%\\"==\\"\\" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST \\"%WDIR%\\"\\\\.mvn goto baseDirFound
cd ..
IF \\"%WDIR%\\"==\\"%CD%\\" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd \\"%EXEC_DIR%\\"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd \\"%EXEC_DIR%\\"

:endDetectBaseDir

IF NOT EXIST \\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\jvm.config\\" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F \\"usebackq delims=\\" %%a in (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\jvm.config\\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE=\\"%JAVA_HOME%\\\\bin\\\\java.exe\\"
set WRAPPER_JAR=\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.jar\\"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set WRAPPER_URL=\\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"

FOR /F \\"usebackq tokens=1,2 delims==\\" %%A IN (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.properties\\") DO (
    IF \\"%%A\\"==\\"wrapperUrl\\" SET WRAPPER_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not \\"%MVNW_REPOURL%\\" == \\"\\" (
        SET WRAPPER_URL=\\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\\"
    )
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %WRAPPER_URL%
    )

    powershell -Command \\"&{\\"^
		\\"$webclient = new-object System.Net.WebClient;\\"^
		\\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\\"^
		\\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\\"^
		\\"}\\"^
		\\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')\\"^
		\\"}\\"
    if \\"%MVNW_VERBOSE%\\" == \\"true\\" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file
SET WRAPPER_SHA_256_SUM=\\"\\"
FOR /F \\"usebackq tokens=1,2 delims==\\" %%A IN (\\"%MAVEN_PROJECTBASEDIR%\\\\.mvn\\\\wrapper\\\\maven-wrapper.properties\\") DO (
    IF \\"%%A\\"==\\"wrapperSha256Sum\\" SET WRAPPER_SHA_256_SUM=%%B
)
IF NOT %WRAPPER_SHA_256_SUM%==\\"\\" (
    powershell -Command \\"&{\\"^
       \\"Import-Module $PSHOME\\\\Modules\\\\Microsoft.PowerShell.Utility -Function Get-FileHash;\\"^
       \\"$hash = (Get-FileHash \\\\\\"%WRAPPER_JAR%\\\\\\" -Algorithm SHA256).Hash.ToLower();\\"^
       \\"If('%WRAPPER_SHA_256_SUM%' -ne $hash){\\"^
       \\"  Write-Error 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';\\"^
       \\"  Write-Error 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';\\"^
       \\"  Write-Error 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';\\"^
       \\"  exit 1;\\"^
       \\"}\\"^
       \\"}\\"
    if ERRORLEVEL 1 goto error
)

@REM Provide a \\"standardized\\" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  \\"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\\" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not \\"%MAVEN_SKIP_RC%\\"==\\"\\" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist \\"%USERPROFILE%\\\\mavenrc_post.bat\\" call \\"%USERPROFILE%\\\\mavenrc_post.bat\\"
if exist \\"%USERPROFILE%\\\\mavenrc_post.cmd\\" call \\"%USERPROFILE%\\\\mavenrc_post.cmd\\"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if \\"%MAVEN_BATCH_PAUSE%\\"==\\"on\\" pause

if \\"%MAVEN_TERMINATE_CMD%\\"==\\"on\\" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%
"
`;

exports[`WebSocket Clients Integration Tests Java Quarkus Client Common Integration tests for Java client generation generate simple client for postman echo: pom.xml 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.asyncapi</groupId>
    <artifactId>quarkus-websocket</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>
        <compiler-plugin.version>3.14.0</compiler-plugin.version>
        <maven.compiler.release>21</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
        <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
        <quarkus.platform.version>3.23.0</quarkus.platform.version>
        <skipITs>true</skipITs>
        <surefire-plugin.version>3.5.2</surefire-plugin.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>\${quarkus.platform.group-id}</groupId>
                <artifactId>\${quarkus.platform.artifact-id}</artifactId>
                <version>\${quarkus.platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-websockets-next</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>\${quarkus.platform.group-id}</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <version>\${quarkus.platform.version}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                            <goal>generate-code</goal>
                            <goal>generate-code-tests</goal>
                            <goal>native-image-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>\${compiler-plugin.version}</version>
                <configuration>
                    <parameters>true</parameters>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>\${surefire-plugin.version}</version>
                <configuration>
                    <systemPropertyVariables>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>\${maven.home}</maven.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>\${surefire-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <native.image.path>\${project.build.directory}/\${project.build.finalName}-runner</native.image.path>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>\${maven.home}</maven.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>native</id>
            <activation>
                <property>
                    <name>native</name>
                </property>
            </activation>
            <properties>
                <skipITs>false</skipITs>
                <quarkus.native.enabled>true</quarkus.native.enabled>
            </properties>
        </profile>
    </profiles>
</project>
"
`;

exports[`WebSocket Clients Integration Tests JavaScript Client Common Integration tests for JavaScript client generation generate simple client for hoppscotch echo with custom client name: README.md 1`] = `
"# Hoppscotch Echo WebSocket Client 

## Overview

Undestand how to use Hoppscotch Echo WebSocket as a client. Hoppscotch Echo WebSocket server echoes back any messages sent to it. You can use this to test WebSocket connections and message flows.


- **Version:** 1.0.0
- **URL:** wss://echo-websocket.hoppscotch.io


## Client API Reference

\`\`\`javascript
const HoppscotchClient = require('./client');
const wsClient = new HoppscotchClient();
\`\`\`

Here the wsClient is an instance of the \`HoppscotchClient\` class.
### Core Methods

#### \`connect()\`
Establishes a WebSocket connection to the server.

#### \`registerMessageHandler(handlerFunction)\`
Registers a callback to handle incoming messages.
- **Parameter:** \`handlerFunction\` - This Function takes a parameter \`message\` which is a string. 

#### \`registerErrorHandler(handlerFunction)\`
Registers a callback to handle WebSocket errors.
- **Parameter:** \`handlerFunction\` - This Function takes a parameter \`error\` which is an object

#### \`close()\`
Closes the WebSocket connection.

### Available Operations

#### \`sendEchoMessage(payload)\`
Send a message to the echo server.



**Example:**
\`\`\`javascript
client.sendEchoMessage(\\"test\\");
\`\`\`


**Example:**
\`\`\`javascript
client.sendEchoMessage(true);
\`\`\`


**Example:**
\`\`\`javascript
client.sendEchoMessage(123);
\`\`\`


**Example:**
\`\`\`javascript
client.sendEchoMessage({
  \\"test\\": \\"test text\\"
});
\`\`\`



#### \`handleTimeStampMessage(payload)\`
Receive the timestamp message sent from server every second.



**Example:**
\`\`\`javascript
client.handleTimeStampMessage(\\"11:13:24 GMT+0000 (Coordinated Universal Time)\\");
\`\`\`



## Testing the client

\`\`\`javascript
const HoppscotchClient = require('./client');
const wsClient = new HoppscotchClient();


// Example of how custom message handler that operates on incoming messages can look like

function myHandler(message) {
  console.log('====================');
  console.log('Just proving I got the message in myHandler:', message);
  console.log('====================');  
}

// Example of custom error handler

function myErrorHandler(error) {
  console.error('Errors from Websocket:', error.message);
}

async function main() {
  wsClient.registerMessageHandler(myHandler);
  wsClient.registerErrorHandler(myErrorHandler);

  try {
    await wsClient.connect();

    // Loop to send messages every 5 seconds
    const interval = 5000; // 5 seconds
    const message = 'Hello, Echo!';

    while (true) {
      try {
        await wsClient.sendEchoMessage(message);
      } catch (error) {
        console.error('Error while sending message:', error);
      }
      // Wait for the interval before sending the next message
      await new Promise(resolve => setTimeout(resolve, interval));
    }
  } catch (error) {
    console.error('Failed to connect to WebSocket:', error.message);
  }
}

main();
\`\`\`



"
`;

exports[`WebSocket Clients Integration Tests JavaScript Client Common Integration tests for JavaScript client generation generate simple client for hoppscotch echo with custom client name: client.js 1`] = `
"//////////////////////////////////////////////////
//
// Hoppscotch Echo WebSocket Client - 1.0.0
// Protocol: wss
// Host: echo-websocket.hoppscotch.io
//
//////////////////////////////////////////////////

const WebSocket = require('ws');

class HoppscotchClient {

  /*
    * Constructor to initialize the WebSocket client
    * @param {string} url - The WebSocket server URL. Use it if the server URL is different from the default one taken from the AsyncAPI document.
  */
  constructor(url) {
    this.url = url || 'wss://echo-websocket.hoppscotch.io';
    this.websocket = null;
    this.messageHandlers = [];
    this.errorHandlers = [];
  }

  // Method to establish a WebSocket connection
  connect() {
    return new Promise((resolve, reject) => {
      this.websocket = new WebSocket(this.url);

      // On successful connection
      this.websocket.onopen = () => {
        console.log('Connected to Hoppscotch Echo WebSocket Client server');
        resolve();
      };

      // On receiving a message
      this.websocket.onmessage = (event) => {
        if (this.messageHandlers.length > 0) {
          // Call custom message handlers
          this.messageHandlers.forEach(handler => {
            if (typeof handler === 'function') {
              this.handleMessage(event.data, handler);
            }
          });
        } else {
          // Default message logging
          console.log('Message received:', event.data);
        }
      };

      // On error first call custom error handlers, then default error behavior
      this.websocket.onerror = (error) => {
        if (this.errorHandlers.length > 0) {
          // Call custom error handlers
          this.errorHandlers.forEach(handler => handler(error));
        } else {
          // Default error behavior
          console.error('WebSocket Error:', error);
        }
        reject(error);
      };

      // On connection close
      this.websocket.onclose = () => {
        console.log('Disconnected from Hoppscotch Echo WebSocket Client server');
      };
    });
  }

  // Method to register custom message handlers
   registerMessageHandler(handler) {
    if (typeof handler === 'function') {
      this.messageHandlers.push(handler);
    } else {
      console.warn('Message handler must be a function');
    }
  }

  // Method to register custom error handlers
  registerErrorHandler(handler) {
    if (typeof handler === 'function') {
      this.errorHandlers.push(handler);
    } else {
      console.warn('Error handler must be a function');
    }
  }

  // Method to handle message with callback
  handleMessage(message, cb) {
    if (cb) cb(message);
  }

  /**
   * Sends a sendEchoMessage message over the WebSocket connection.
   * 
   * @param {Object} message - The message payload to send. Should match the schema defined in the AsyncAPI document.
   * @param {WebSocket} [socket] - The WebSocket connection to use. If not provided, the client's own connection will be used.
   * @throws {TypeError} If message cannot be stringified to JSON
   * @throws {Error} If WebSocket connection is not in OPEN state
   */
  static sendEchoMessage(message, socket) {
    try {
      socket.send(JSON.stringify(message));
    } catch (error) {
      console.error('Error sending sendEchoMessage message:', error);
    }
  }
  /**
   * Instance method version of sendEchoMessage that uses the client's own WebSocket connection.
   * @param {Object} message - The message payload to send
   * @throws {Error} If WebSocket connection is not established
   */
  sendEchoMessage(message){
    if(!this.websocket){
      throw new Error('WebSocket connection not established. Call connect() first.');
    }
    HoppscotchClient.sendEchoMessage(message, this.websocket);
  }
  

  // Method to close the WebSocket connection
   close() {
    if (this.websocket) {
        this.websocket.close();
        console.log('WebSocket connection closed.');
    }
  }
}
module.exports = HoppscotchClient;

"
`;

exports[`WebSocket Clients Integration Tests JavaScript Client Common Integration tests for JavaScript client generation generate simple client for hoppscotch echo: README.md 1`] = `
"# Hoppscotch Echo WebSocket Client 

## Overview

Undestand how to use Hoppscotch Echo WebSocket as a client. Hoppscotch Echo WebSocket server echoes back any messages sent to it. You can use this to test WebSocket connections and message flows.


- **Version:** 1.0.0
- **URL:** wss://echo-websocket.hoppscotch.io


## Client API Reference

\`\`\`javascript
const HoppscotchEchoWebSocketClient = require('./client');
const wsClient = new HoppscotchEchoWebSocketClient();
\`\`\`

Here the wsClient is an instance of the \`HoppscotchEchoWebSocketClient\` class.
### Core Methods

#### \`connect()\`
Establishes a WebSocket connection to the server.

#### \`registerMessageHandler(handlerFunction)\`
Registers a callback to handle incoming messages.
- **Parameter:** \`handlerFunction\` - This Function takes a parameter \`message\` which is a string. 

#### \`registerErrorHandler(handlerFunction)\`
Registers a callback to handle WebSocket errors.
- **Parameter:** \`handlerFunction\` - This Function takes a parameter \`error\` which is an object

#### \`close()\`
Closes the WebSocket connection.

### Available Operations

#### \`sendEchoMessage(payload)\`
Send a message to the echo server.



**Example:**
\`\`\`javascript
client.sendEchoMessage(\\"test\\");
\`\`\`


**Example:**
\`\`\`javascript
client.sendEchoMessage(true);
\`\`\`


**Example:**
\`\`\`javascript
client.sendEchoMessage(123);
\`\`\`


**Example:**
\`\`\`javascript
client.sendEchoMessage({
  \\"test\\": \\"test text\\"
});
\`\`\`



#### \`handleTimeStampMessage(payload)\`
Receive the timestamp message sent from server every second.



**Example:**
\`\`\`javascript
client.handleTimeStampMessage(\\"11:13:24 GMT+0000 (Coordinated Universal Time)\\");
\`\`\`



## Testing the client

\`\`\`javascript
const HoppscotchEchoWebSocketClient = require('./client');
const wsClient = new HoppscotchEchoWebSocketClient();


// Example of how custom message handler that operates on incoming messages can look like

function myHandler(message) {
  console.log('====================');
  console.log('Just proving I got the message in myHandler:', message);
  console.log('====================');  
}

// Example of custom error handler

function myErrorHandler(error) {
  console.error('Errors from Websocket:', error.message);
}

async function main() {
  wsClient.registerMessageHandler(myHandler);
  wsClient.registerErrorHandler(myErrorHandler);

  try {
    await wsClient.connect();

    // Loop to send messages every 5 seconds
    const interval = 5000; // 5 seconds
    const message = 'Hello, Echo!';

    while (true) {
      try {
        await wsClient.sendEchoMessage(message);
      } catch (error) {
        console.error('Error while sending message:', error);
      }
      // Wait for the interval before sending the next message
      await new Promise(resolve => setTimeout(resolve, interval));
    }
  } catch (error) {
    console.error('Failed to connect to WebSocket:', error.message);
  }
}

main();
\`\`\`



"
`;

exports[`WebSocket Clients Integration Tests JavaScript Client Common Integration tests for JavaScript client generation generate simple client for hoppscotch echo: client.js 1`] = `
"//////////////////////////////////////////////////
//
// Hoppscotch Echo WebSocket Client - 1.0.0
// Protocol: wss
// Host: echo-websocket.hoppscotch.io
//
//////////////////////////////////////////////////

const WebSocket = require('ws');

class HoppscotchEchoWebSocketClient {

  /*
    * Constructor to initialize the WebSocket client
    * @param {string} url - The WebSocket server URL. Use it if the server URL is different from the default one taken from the AsyncAPI document.
  */
  constructor(url) {
    this.url = url || 'wss://echo-websocket.hoppscotch.io';
    this.websocket = null;
    this.messageHandlers = [];
    this.errorHandlers = [];
  }

  // Method to establish a WebSocket connection
  connect() {
    return new Promise((resolve, reject) => {
      this.websocket = new WebSocket(this.url);

      // On successful connection
      this.websocket.onopen = () => {
        console.log('Connected to Hoppscotch Echo WebSocket Client server');
        resolve();
      };

      // On receiving a message
      this.websocket.onmessage = (event) => {
        if (this.messageHandlers.length > 0) {
          // Call custom message handlers
          this.messageHandlers.forEach(handler => {
            if (typeof handler === 'function') {
              this.handleMessage(event.data, handler);
            }
          });
        } else {
          // Default message logging
          console.log('Message received:', event.data);
        }
      };

      // On error first call custom error handlers, then default error behavior
      this.websocket.onerror = (error) => {
        if (this.errorHandlers.length > 0) {
          // Call custom error handlers
          this.errorHandlers.forEach(handler => handler(error));
        } else {
          // Default error behavior
          console.error('WebSocket Error:', error);
        }
        reject(error);
      };

      // On connection close
      this.websocket.onclose = () => {
        console.log('Disconnected from Hoppscotch Echo WebSocket Client server');
      };
    });
  }

  // Method to register custom message handlers
   registerMessageHandler(handler) {
    if (typeof handler === 'function') {
      this.messageHandlers.push(handler);
    } else {
      console.warn('Message handler must be a function');
    }
  }

  // Method to register custom error handlers
  registerErrorHandler(handler) {
    if (typeof handler === 'function') {
      this.errorHandlers.push(handler);
    } else {
      console.warn('Error handler must be a function');
    }
  }

  // Method to handle message with callback
  handleMessage(message, cb) {
    if (cb) cb(message);
  }

  /**
   * Sends a sendEchoMessage message over the WebSocket connection.
   * 
   * @param {Object} message - The message payload to send. Should match the schema defined in the AsyncAPI document.
   * @param {WebSocket} [socket] - The WebSocket connection to use. If not provided, the client's own connection will be used.
   * @throws {TypeError} If message cannot be stringified to JSON
   * @throws {Error} If WebSocket connection is not in OPEN state
   */
  static sendEchoMessage(message, socket) {
    try {
      socket.send(JSON.stringify(message));
    } catch (error) {
      console.error('Error sending sendEchoMessage message:', error);
    }
  }
  /**
   * Instance method version of sendEchoMessage that uses the client's own WebSocket connection.
   * @param {Object} message - The message payload to send
   * @throws {Error} If WebSocket connection is not established
   */
  sendEchoMessage(message){
    if(!this.websocket){
      throw new Error('WebSocket connection not established. Call connect() first.');
    }
    HoppscotchEchoWebSocketClient.sendEchoMessage(message, this.websocket);
  }
  

  // Method to close the WebSocket connection
   close() {
    if (this.websocket) {
        this.websocket.close();
        console.log('WebSocket connection closed.');
    }
  }
}
module.exports = HoppscotchEchoWebSocketClient;

"
`;

exports[`WebSocket Clients Integration Tests JavaScript Client Common Integration tests for JavaScript client generation generate simple client for postman echo: README.md 1`] = `
"# Postman Echo WebSocket Client 

## Overview

Understand how to use the Postman Echo WebSocket as a client. The Postman Echo WebSocket server echoes back any messages sent to it.

- **Version:** 1.0.0
- **URL:** wss://ws.postman-echo.com/raw


## Client API Reference

\`\`\`javascript
const PostmanEchoWebSocketClientClient = require('./client');
const wsClient = new PostmanEchoWebSocketClientClient();
\`\`\`

Here the wsClient is an instance of the \`PostmanEchoWebSocketClientClient\` class.
### Core Methods

#### \`connect()\`
Establishes a WebSocket connection to the server.

#### \`registerMessageHandler(handlerFunction)\`
Registers a callback to handle incoming messages.
- **Parameter:** \`handlerFunction\` - This Function takes a parameter \`message\` which is a string. 

#### \`registerErrorHandler(handlerFunction)\`
Registers a callback to handle WebSocket errors.
- **Parameter:** \`handlerFunction\` - This Function takes a parameter \`error\` which is an object

#### \`close()\`
Closes the WebSocket connection.

### Available Operations

#### \`sendEchoMessage(payload)\`
Send a message to the Postman Echo server.



**Example:**
\`\`\`javascript
client.sendEchoMessage(\\"test\\");
\`\`\`


**Example:**
\`\`\`javascript
client.sendEchoMessage({
  \\"test\\": \\"test text\\"
});
\`\`\`



## Testing the client

\`\`\`javascript
const PostmanEchoWebSocketClientClient = require('./client');
const wsClient = new PostmanEchoWebSocketClientClient();


// Example of how custom message handler that operates on incoming messages can look like

function myHandler(message) {
  console.log('====================');
  console.log('Just proving I got the message in myHandler:', message);
  console.log('====================');  
}

// Example of custom error handler

function myErrorHandler(error) {
  console.error('Errors from Websocket:', error.message);
}

async function main() {
  wsClient.registerMessageHandler(myHandler);
  wsClient.registerErrorHandler(myErrorHandler);

  try {
    await wsClient.connect();

    // Loop to send messages every 5 seconds
    const interval = 5000; // 5 seconds
    const message = 'Hello, Echo!';

    while (true) {
      try {
        await wsClient.sendEchoMessage(message);
      } catch (error) {
        console.error('Error while sending message:', error);
      }
      // Wait for the interval before sending the next message
      await new Promise(resolve => setTimeout(resolve, interval));
    }
  } catch (error) {
    console.error('Failed to connect to WebSocket:', error.message);
  }
}

main();
\`\`\`



"
`;

exports[`WebSocket Clients Integration Tests JavaScript Client Common Integration tests for JavaScript client generation generate simple client for postman echo: client.js 1`] = `
"//////////////////////////////////////////////////
//
// Postman Echo WebSocket Client - 1.0.0
// Protocol: wss
// Host: ws.postman-echo.com
// Path: /raw
//
//////////////////////////////////////////////////

const WebSocket = require('ws');

class PostmanEchoWebSocketClientClient {

  /*
    * Constructor to initialize the WebSocket client
    * @param {string} url - The WebSocket server URL. Use it if the server URL is different from the default one taken from the AsyncAPI document.
  */
  constructor(url) {
    this.url = url || 'wss://ws.postman-echo.com/raw';
    this.websocket = null;
    this.messageHandlers = [];
    this.errorHandlers = [];
  }

  // Method to establish a WebSocket connection
  connect() {
    return new Promise((resolve, reject) => {
      this.websocket = new WebSocket(this.url);

      // On successful connection
      this.websocket.onopen = () => {
        console.log('Connected to Postman Echo WebSocket Client server');
        resolve();
      };

      // On receiving a message
      this.websocket.onmessage = (event) => {
        if (this.messageHandlers.length > 0) {
          // Call custom message handlers
          this.messageHandlers.forEach(handler => {
            if (typeof handler === 'function') {
              this.handleMessage(event.data, handler);
            }
          });
        } else {
          // Default message logging
          console.log('Message received:', event.data);
        }
      };

      // On error first call custom error handlers, then default error behavior
      this.websocket.onerror = (error) => {
        if (this.errorHandlers.length > 0) {
          // Call custom error handlers
          this.errorHandlers.forEach(handler => handler(error));
        } else {
          // Default error behavior
          console.error('WebSocket Error:', error);
        }
        reject(error);
      };

      // On connection close
      this.websocket.onclose = () => {
        console.log('Disconnected from Postman Echo WebSocket Client server');
      };
    });
  }

  // Method to register custom message handlers
   registerMessageHandler(handler) {
    if (typeof handler === 'function') {
      this.messageHandlers.push(handler);
    } else {
      console.warn('Message handler must be a function');
    }
  }

  // Method to register custom error handlers
  registerErrorHandler(handler) {
    if (typeof handler === 'function') {
      this.errorHandlers.push(handler);
    } else {
      console.warn('Error handler must be a function');
    }
  }

  // Method to handle message with callback
  handleMessage(message, cb) {
    if (cb) cb(message);
  }

  /**
   * Sends a sendEchoMessage message over the WebSocket connection.
   * 
   * @param {Object} message - The message payload to send. Should match the schema defined in the AsyncAPI document.
   * @param {WebSocket} [socket] - The WebSocket connection to use. If not provided, the client's own connection will be used.
   * @throws {TypeError} If message cannot be stringified to JSON
   * @throws {Error} If WebSocket connection is not in OPEN state
   */
  static sendEchoMessage(message, socket) {
    try {
      socket.send(JSON.stringify(message));
    } catch (error) {
      console.error('Error sending sendEchoMessage message:', error);
    }
  }
  /**
   * Instance method version of sendEchoMessage that uses the client's own WebSocket connection.
   * @param {Object} message - The message payload to send
   * @throws {Error} If WebSocket connection is not established
   */
  sendEchoMessage(message){
    if(!this.websocket){
      throw new Error('WebSocket connection not established. Call connect() first.');
    }
    PostmanEchoWebSocketClientClient.sendEchoMessage(message, this.websocket);
  }
  

  // Method to close the WebSocket connection
   close() {
    if (this.websocket) {
        this.websocket.close();
        console.log('WebSocket connection closed.');
    }
  }
}
module.exports = PostmanEchoWebSocketClientClient;

"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: Acknowledge.py 1`] = `
"class Acknowledge: 
  def __init__(self, input: Dict):
    if 'envelope_id' in input:
      self._envelope_id: str = input['envelope_id']
    if 'payload' in input:
      self._payload: dict[str, Any] = input['payload']
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def envelope_id(self) -> str:
    return self._envelope_id
  @envelope_id.setter
  def envelope_id(self, envelope_id: str):
    self._envelope_id = envelope_id

  @property
  def payload(self) -> dict[str, Any]:
    return self._payload
  @payload.setter
  def payload(self, payload: dict[str, Any]):
    self._payload = payload

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: Authorization.py 1`] = `
"class Authorization: 
  def __init__(self, input: Dict):
    if 'enterprise_id' in input:
      self._enterprise_id: str = input['enterprise_id']
    if 'team_id' in input:
      self._team_id: str = input['team_id']
    if 'user_id' in input:
      self._user_id: str = input['user_id']
    if 'is_bot' in input:
      self._is_bot: bool = input['is_bot']
    if 'is_enterprise_install' in input:
      self._is_enterprise_install: bool = input['is_enterprise_install']
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def enterprise_id(self) -> str:
    return self._enterprise_id
  @enterprise_id.setter
  def enterprise_id(self, enterprise_id: str):
    self._enterprise_id = enterprise_id

  @property
  def team_id(self) -> str:
    return self._team_id
  @team_id.setter
  def team_id(self, team_id: str):
    self._team_id = team_id

  @property
  def user_id(self) -> str:
    return self._user_id
  @user_id.setter
  def user_id(self, user_id: str):
    self._user_id = user_id

  @property
  def is_bot(self) -> bool:
    return self._is_bot
  @is_bot.setter
  def is_bot(self, is_bot: bool):
    self._is_bot = is_bot

  @property
  def is_enterprise_install(self) -> bool:
    return self._is_enterprise_install
  @is_enterprise_install.setter
  def is_enterprise_install(self, is_enterprise_install: bool):
    self._is_enterprise_install = is_enterprise_install

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: ChannelJoin.py 1`] = `
"class ChannelJoin: 
  def __init__(self, input: Dict):
    self._type: str = 'message'
    if 'event_ts' in input:
      self._event_ts: str = input['event_ts']
    self._subtype: str = 'message'
    self._inviter: str = 'message'
    self._text: str = 'message'
    self._user: str = 'message'
    self._ts: str = 'message'
    self._channel_type: str = 'message'
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def type(self) -> str:
    return self._type

  @property
  def event_ts(self) -> str:
    return self._event_ts
  @event_ts.setter
  def event_ts(self, event_ts: str):
    self._event_ts = event_ts

  @property
  def subtype(self) -> str:
    return self._subtype

  @property
  def inviter(self) -> str:
    return self._inviter

  @property
  def text(self) -> str:
    return self._text

  @property
  def user(self) -> str:
    return self._user

  @property
  def ts(self) -> str:
    return self._ts

  @property
  def channel_type(self) -> str:
    return self._channel_type

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: ConnectionInfo.py 1`] = `
"class ConnectionInfo: 
  def __init__(self, input: Dict):
    if 'app_id' in input:
      self._app_id: str = input['app_id']
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def app_id(self) -> str:
    return self._app_id
  @app_id.setter
  def app_id(self, app_id: str):
    self._app_id = app_id

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: DebugInfo.py 1`] = `
"class DebugInfo: 
  def __init__(self, input: Dict):
    if 'host' in input:
      self._host: str = input['host']
    if 'started' in input:
      self._started: str = input['started']
    if 'build_number' in input:
      self._build_number: int = input['build_number']
    if 'approximate_connection_time' in input:
      self._approximate_connection_time: int = input['approximate_connection_time']
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def host(self) -> str:
    return self._host
  @host.setter
  def host(self, host: str):
    self._host = host

  @property
  def started(self) -> str:
    return self._started
  @started.setter
  def started(self, started: str):
    self._started = started

  @property
  def build_number(self) -> int:
    return self._build_number
  @build_number.setter
  def build_number(self, build_number: int):
    self._build_number = build_number

  @property
  def approximate_connection_time(self) -> int:
    return self._approximate_connection_time
  @approximate_connection_time.setter
  def approximate_connection_time(self, approximate_connection_time: int):
    self._approximate_connection_time = approximate_connection_time

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: Disconnect.py 1`] = `
"class Disconnect: 
  def __init__(self, input: Dict):
    if 'type' in input:
      self._type: str = input['type']
    if 'reason' in input:
      self._reason: DisconnectReasonEnum = DisconnectReasonEnum(input['reason'])
    if 'debug_info' in input:
      self._debug_info: DebugInfo = DebugInfo(input['debug_info'])
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def type(self) -> str:
    return self._type
  @type.setter
  def type(self, type: str):
    self._type = type

  @property
  def reason(self) -> DisconnectReasonEnum:
    return self._reason
  @reason.setter
  def reason(self, reason: DisconnectReasonEnum):
    self._reason = reason

  @property
  def debug_info(self) -> DebugInfo:
    return self._debug_info
  @debug_info.setter
  def debug_info(self, debug_info: DebugInfo):
    self._debug_info = debug_info

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: DisconnectReasonEnum.py 1`] = `
"class DisconnectReasonEnum(Enum): 
  LINK_DISABLED = \\"link_disabled\\"
  WARNING = \\"warning\\"
  REFRESH_REQUESTED = \\"refresh_requested\\""
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: Event.py 1`] = `
"class Event: 
  def __init__(self, input: Dict):
    if 'envelope_id' in input:
      self._envelope_id: str = input['envelope_id']
    if 'payload' in input:
      self._payload: EventPayload = EventPayload(input['payload'])
    if 'type' in input:
      self._type: str = input['type']
    if 'accepts_response_payload' in input:
      self._accepts_response_payload: bool = input['accepts_response_payload']
    if 'retry_attempt' in input:
      self._retry_attempt: int = input['retry_attempt']
    if 'retry_reason' in input:
      self._retry_reason: str = input['retry_reason']

  @property
  def envelope_id(self) -> str:
    return self._envelope_id
  @envelope_id.setter
  def envelope_id(self, envelope_id: str):
    self._envelope_id = envelope_id

  @property
  def payload(self) -> EventPayload:
    return self._payload
  @payload.setter
  def payload(self, payload: EventPayload):
    self._payload = payload

  @property
  def type(self) -> str:
    return self._type
  @type.setter
  def type(self, type: str):
    self._type = type

  @property
  def accepts_response_payload(self) -> bool:
    return self._accepts_response_payload
  @accepts_response_payload.setter
  def accepts_response_payload(self, accepts_response_payload: bool):
    self._accepts_response_payload = accepts_response_payload

  @property
  def retry_attempt(self) -> int:
    return self._retry_attempt
  @retry_attempt.setter
  def retry_attempt(self, retry_attempt: int):
    self._retry_attempt = retry_attempt

  @property
  def retry_reason(self) -> str:
    return self._retry_reason
  @retry_reason.setter
  def retry_reason(self, retry_reason: str):
    self._retry_reason = retry_reason
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: EventPayload.py 1`] = `
"class EventPayload: 
  def __init__(self, input: Dict):
    if 'token' in input:
      self._token: str = input['token']
    if 'team_id' in input:
      self._team_id: str = input['team_id']
    if 'context_team_id' in input:
      self._context_team_id: str = input['context_team_id']
    if 'context_enterprise_id' in input:
      self._context_enterprise_id: str = input['context_enterprise_id']
    if 'api_app_id' in input:
      self._api_app_id: str = input['api_app_id']
    if 'event' in input:
      self._event: ChannelJoin | ReactionAdded | MessageDeleted = input['event']
    if 'type' in input:
      self._type: str = input['type']
    if 'event_id' in input:
      self._event_id: str = input['event_id']
    if 'event_time' in input:
      self._event_time: int = input['event_time']
    if 'event_context' in input:
      self._event_context: str = input['event_context']
    if 'authorizations' in input:
      self._authorizations: List[Authorization] = input['authorizations']

  @property
  def token(self) -> str:
    return self._token
  @token.setter
  def token(self, token: str):
    self._token = token

  @property
  def team_id(self) -> str:
    return self._team_id
  @team_id.setter
  def team_id(self, team_id: str):
    self._team_id = team_id

  @property
  def context_team_id(self) -> str:
    return self._context_team_id
  @context_team_id.setter
  def context_team_id(self, context_team_id: str):
    self._context_team_id = context_team_id

  @property
  def context_enterprise_id(self) -> str:
    return self._context_enterprise_id
  @context_enterprise_id.setter
  def context_enterprise_id(self, context_enterprise_id: str):
    self._context_enterprise_id = context_enterprise_id

  @property
  def api_app_id(self) -> str:
    return self._api_app_id
  @api_app_id.setter
  def api_app_id(self, api_app_id: str):
    self._api_app_id = api_app_id

  @property
  def event(self) -> ChannelJoin | ReactionAdded | MessageDeleted:
    return self._event
  @event.setter
  def event(self, event: ChannelJoin | ReactionAdded | MessageDeleted):
    self._event = event

  @property
  def type(self) -> str:
    return self._type
  @type.setter
  def type(self, type: str):
    self._type = type

  @property
  def event_id(self) -> str:
    return self._event_id
  @event_id.setter
  def event_id(self, event_id: str):
    self._event_id = event_id

  @property
  def event_time(self) -> int:
    return self._event_time
  @event_time.setter
  def event_time(self, event_time: int):
    self._event_time = event_time

  @property
  def event_context(self) -> str:
    return self._event_context
  @event_context.setter
  def event_context(self, event_context: str):
    self._event_context = event_context

  @property
  def authorizations(self) -> List[Authorization]:
    return self._authorizations
  @authorizations.setter
  def authorizations(self, authorizations: List[Authorization]):
    self._authorizations = authorizations
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: Hello.py 1`] = `
"class Hello: 
  def __init__(self, input: Dict):
    if 'type' in input:
      self._type: str = input['type']
    if 'connection_info' in input:
      self._connection_info: ConnectionInfo = ConnectionInfo(input['connection_info'])
    if 'num_connections' in input:
      self._num_connections: int = input['num_connections']
    if 'debug_info' in input:
      self._debug_info: DebugInfo = DebugInfo(input['debug_info'])
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def type(self) -> str:
    return self._type
  @type.setter
  def type(self, type: str):
    self._type = type

  @property
  def connection_info(self) -> ConnectionInfo:
    return self._connection_info
  @connection_info.setter
  def connection_info(self, connection_info: ConnectionInfo):
    self._connection_info = connection_info

  @property
  def num_connections(self) -> int:
    return self._num_connections
  @num_connections.setter
  def num_connections(self, num_connections: int):
    self._num_connections = num_connections

  @property
  def debug_info(self) -> DebugInfo:
    return self._debug_info
  @debug_info.setter
  def debug_info(self, debug_info: DebugInfo):
    self._debug_info = debug_info

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: MessageDeleted.py 1`] = `
"class MessageDeleted: 
  def __init__(self, input: Dict):
    self._type: str = 'message'
    if 'event_ts' in input:
      self._event_ts: str = input['event_ts']
    self._subtype: str = 'message'
    self._deleted_ts: str = 'message'
    self._channel: str = 'message'
    self._ts: str = 'message'
    self._channel_type: str = 'message'
    self._previous_message: str = 'message'
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def type(self) -> str:
    return self._type

  @property
  def event_ts(self) -> str:
    return self._event_ts
  @event_ts.setter
  def event_ts(self, event_ts: str):
    self._event_ts = event_ts

  @property
  def subtype(self) -> str:
    return self._subtype

  @property
  def deleted_ts(self) -> str:
    return self._deleted_ts

  @property
  def channel(self) -> str:
    return self._channel

  @property
  def ts(self) -> str:
    return self._ts

  @property
  def channel_type(self) -> str:
    return self._channel_type

  @property
  def previous_message(self) -> str:
    return self._previous_message

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: ReactionAdded.py 1`] = `
"class ReactionAdded: 
  def __init__(self, input: Dict):
    self._type: str = 'message'
    if 'event_ts' in input:
      self._event_ts: str = input['event_ts']
    self._reaction: str = 'message'
    self._user: str = 'message'
    self._item: str = 'message'
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def type(self) -> str:
    return self._type

  @property
  def event_ts(self) -> str:
    return self._event_ts
  @event_ts.setter
  def event_ts(self, event_ts: str):
    self._event_ts = event_ts

  @property
  def reaction(self) -> str:
    return self._reaction

  @property
  def user(self) -> str:
    return self._user

  @property
  def item(self) -> str:
    return self._item

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: client.py 1`] = `
"##################################################
#
# Slack Websocket API Client - 1.0.0
# Protocol: wss
# Host: wss-primary.slack.com
# Path: /link
#
##################################################

import json
import certifi
import threading
import websocket
import os
from urllib.parse import urlencode

class SlackWebsocketAPIClient:

  def __init__(self, url: str = \\"wss://wss-primary.slack.com/link\\", ticket: str = None, app_id: str = None):

        \\"\\"\\"
        Constructor to initialize the WebSocket client.

        Args:
            url (str, optional): The WebSocket server URL. Use it if the server URL is 
            different from the default one taken from the AsyncAPI document.
 ticket (str, optional):If provided (or if TICKET environment variable is set), added as ?ticket=… to URL
 app_id (str, optional):If provided (or if APP_ID environment variable is set), added as ?app_id=… to URL
        \\"\\"\\"
        self.ws_app = None  # Instance of WebSocketApp
        self.message_handlers = []      # Callables for incoming messages
        self.error_handlers = []        # Callables for errors
        self.outgoing_processors = []   # Callables to process outgoing messages
        self._stop_event = threading.Event()
      
        params = {}
        ticket = ticket or os.getenv(\\"TICKET\\")
        if ticket is not None:
          params[\\"ticket\\"] = ticket
        app_id = app_id or os.getenv(\\"APP_ID\\")
        if app_id is not None:
          params[\\"app_id\\"] = app_id

        qs = urlencode(params) if params else \\"\\"
        self.url = f\\"{url}{f'?{qs}' if qs else ''}\\"

  def on_open(self, ws):
      print(\\"Connected to Slack Websocket API Client server\\")

  def on_message(self, ws, message):
      self.handle_message(message)

  def on_error(self, ws, error):
      print(\\"WebSocket Error:\\", error)
      self.handle_error(error)

  def on_close(self, ws, close_status_code, close_msg):
      print(\\"Disconnected from Slack Websocket API Client\\", close_status_code, close_msg)

  def connect(self):
      \\"\\"\\"Establish the connection and start the run_forever loop in a background thread.\\"\\"\\"
      ssl_opts = {\\"ca_certs\\": certifi.where()}
      self.ws_app = websocket.WebSocketApp(
          self.url,
          on_open=self.on_open,
          on_message=self.on_message,
          on_error=self.on_error,
          on_close=self.on_close
      )
      # Run the WebSocketApp's run_forever in a separate thread with multithreading enabled.
      def run():

          retry = 0
          max_retries = 5
        
          while not self._stop_event.is_set() and retry < max_retries:
              try:
                  retry += 1
                  print(\\"Starting WebSocket thread...\\")
                  self.ws_app.run_forever(sslopt=ssl_opts)
              except Exception as e:
                  print(f\\"Exception in WebSocket thread: {e}\\")  # Print full error details

      thread = threading.Thread(target=run, daemon=True)
      thread.start()

  def register_message_handler(self, handler) :
    \\"\\"\\"Register a callable to process incoming messages.\\"\\"\\"
    if callable(handler):
      self.message_handlers.append(handler)
    else:
        print(\\"Message handler must be callable\\")


  def register_error_handler(self, handler):
      \\"\\"\\"Register a callable to process errors.\\"\\"\\"
      if callable(handler):
          self.error_handlers.append(handler)
      else:
          print(\\"Error handler must be callable\\")

  def register_outgoing_processor(self, processor):
      \\"\\"\\"
      Register a callable that processes outgoing messages automatically.
      These processors run in sequence before each message is sent.
      \\"\\"\\"
      if callable(processor):
          self.outgoing_processors.append(processor)
      else:
          print(\\"Outgoing processor must be callable\\")

  def handle_message(self, message):
      \\"\\"\\"Pass the incoming message to all registered message handlers. \\"\\"\\"
      if len(self.message_handlers) == 0:
        print(\\"\\\\033[94mReceived raw message:\\\\033[0m\\", message)
      else:
        for handler in self.message_handlers:
          handler(message)

  def handle_error(self, error):
      \\"\\"\\"Pass the error to all registered error handlers. Generic log message is printed if no handlers are registered.\\"\\"\\"
      if len(self.error_handlers) == 0:
        print(\\"\\\\033[91mError occurred:\\\\033[0m\\", error)
      else:
        # Call custom error handlers
        for handler in self.error_handlers:
          handler(error)

  def close(self) :
    \\"\\"\\"Cleanly close the WebSocket connection.\\"\\"\\"
    self._stop_event.set()
    if self.ws_app:
        self.ws_app.close()
        print(\\"WebSocket connection closed.\\")


"
`;

exports[`WebSocket Clients Integration Tests Python Client Additional tests for Python client generate client for slack: requirements.txt 1`] = `
"websocket-client==1.8.0
certifi==2025.1.31
requests==2.32.3
"
`;

exports[`WebSocket Clients Integration Tests Python Client Common Integration tests for Python client generation generate simple client for hoppscotch echo with custom client name: client.py 1`] = `
"##################################################
#
# Hoppscotch Echo WebSocket Client - 1.0.0
# Protocol: wss
# Host: echo-websocket.hoppscotch.io
#
##################################################

import json
import certifi
import threading
import websocket

class HoppscotchClient:

  def __init__(self, url: str = \\"wss://echo-websocket.hoppscotch.io\\"):

        \\"\\"\\"
        Constructor to initialize the WebSocket client.

        Args:
            url (str, optional): The WebSocket server URL. Use it if the server URL is 
            different from the default one taken from the AsyncAPI document.
        \\"\\"\\"
        self.ws_app = None  # Instance of WebSocketApp
        self.message_handlers = []      # Callables for incoming messages
        self.error_handlers = []        # Callables for errors
        self.outgoing_processors = []   # Callables to process outgoing messages
        self._stop_event = threading.Event()
      
      

        
        self.url = url

  def on_open(self, ws):
      print(\\"Connected to Hoppscotch Echo WebSocket Client server\\")

  def on_message(self, ws, message):
      self.handle_message(message)

  def on_error(self, ws, error):
      print(\\"WebSocket Error:\\", error)
      self.handle_error(error)

  def on_close(self, ws, close_status_code, close_msg):
      print(\\"Disconnected from Hoppscotch Echo WebSocket Client\\", close_status_code, close_msg)

  def connect(self):
      \\"\\"\\"Establish the connection and start the run_forever loop in a background thread.\\"\\"\\"
      ssl_opts = {\\"ca_certs\\": certifi.where()}
      self.ws_app = websocket.WebSocketApp(
          self.url,
          on_open=self.on_open,
          on_message=self.on_message,
          on_error=self.on_error,
          on_close=self.on_close
      )
      # Run the WebSocketApp's run_forever in a separate thread with multithreading enabled.
      def run():

          retry = 0
          max_retries = 5
        
          while not self._stop_event.is_set() and retry < max_retries:
              try:
                  retry += 1
                  print(\\"Starting WebSocket thread...\\")
                  self.ws_app.run_forever(sslopt=ssl_opts)
              except Exception as e:
                  print(f\\"Exception in WebSocket thread: {e}\\")  # Print full error details

      thread = threading.Thread(target=run, daemon=True)
      thread.start()

  def register_message_handler(self, handler) :
    \\"\\"\\"Register a callable to process incoming messages.\\"\\"\\"
    if callable(handler):
      self.message_handlers.append(handler)
    else:
        print(\\"Message handler must be callable\\")


  def register_error_handler(self, handler):
      \\"\\"\\"Register a callable to process errors.\\"\\"\\"
      if callable(handler):
          self.error_handlers.append(handler)
      else:
          print(\\"Error handler must be callable\\")

  def register_outgoing_processor(self, processor):
      \\"\\"\\"
      Register a callable that processes outgoing messages automatically.
      These processors run in sequence before each message is sent.
      \\"\\"\\"
      if callable(processor):
          self.outgoing_processors.append(processor)
      else:
          print(\\"Outgoing processor must be callable\\")

  def handle_message(self, message):
      \\"\\"\\"Pass the incoming message to all registered message handlers. \\"\\"\\"
      if len(self.message_handlers) == 0:
        print(\\"\\\\033[94mReceived raw message:\\\\033[0m\\", message)
      else:
        for handler in self.message_handlers:
          handler(message)

  def handle_error(self, error):
      \\"\\"\\"Pass the error to all registered error handlers. Generic log message is printed if no handlers are registered.\\"\\"\\"
      if len(self.error_handlers) == 0:
        print(\\"\\\\033[91mError occurred:\\\\033[0m\\", error)
      else:
        # Call custom error handlers
        for handler in self.error_handlers:
          handler(error)

  async def send_echo_message(self, message):
      \\"\\"\\"
      Send a send_echo_message message using the WebSocket connection attached to this instance.

      Args:
          message (dict or str): The message to send. Will be serialized to JSON if it's a dictionary.

      Raises:
          Exception: If sending fails or the socket is not connected.
      \\"\\"\\"
      await self._send(message, self.ws_app)

  @staticmethod
  async def send_echo_message_static(message, socket):
      \\"\\"\\"
      Send a send_echo_message message using a provided WebSocket connection, without needing an instance.

      Args:
          message (dict or str): The message to send.
          socket (websockets.WebSocketCommonProtocol): The WebSocket to send through.

      Raises:
          Exception: If sending fails or the socket is not connected.
      \\"\\"\\"
      await HoppscotchClient._send(message, socket)


  @staticmethod
  async def _send(message, socket):
      \\"\\"\\"
      Internal helper to handle the actual sending logic.

      Args:
          message (dict or str): The message to send.
          socket (websockets.WebSocketCommonProtocol): The WebSocket to send through.

      Notes:
          If message is a dictionary, it will be automatically converted to JSON.
      \\"\\"\\"
      try:
          if isinstance(message, dict):
              message = json.dumps(message)
          await socket.send(message)
      except Exception as e:
          print(\\"Error sending:\\", e)

  def close(self) :
    \\"\\"\\"Cleanly close the WebSocket connection.\\"\\"\\"
    self._stop_event.set()
    if self.ws_app:
        self.ws_app.close()
        print(\\"WebSocket connection closed.\\")


"
`;

exports[`WebSocket Clients Integration Tests Python Client Common Integration tests for Python client generation generate simple client for hoppscotch echo with custom client name: requirements.txt 1`] = `
"websocket-client==1.8.0
certifi==2025.1.31
requests==2.32.3
"
`;

exports[`WebSocket Clients Integration Tests Python Client Common Integration tests for Python client generation generate simple client for hoppscotch echo: client.py 1`] = `
"##################################################
#
# Hoppscotch Echo WebSocket Client - 1.0.0
# Protocol: wss
# Host: echo-websocket.hoppscotch.io
#
##################################################

import json
import certifi
import threading
import websocket

class HoppscotchEchoWebSocketClient:

  def __init__(self, url: str = \\"wss://echo-websocket.hoppscotch.io\\"):

        \\"\\"\\"
        Constructor to initialize the WebSocket client.

        Args:
            url (str, optional): The WebSocket server URL. Use it if the server URL is 
            different from the default one taken from the AsyncAPI document.
        \\"\\"\\"
        self.ws_app = None  # Instance of WebSocketApp
        self.message_handlers = []      # Callables for incoming messages
        self.error_handlers = []        # Callables for errors
        self.outgoing_processors = []   # Callables to process outgoing messages
        self._stop_event = threading.Event()
      
      

        
        self.url = url

  def on_open(self, ws):
      print(\\"Connected to Hoppscotch Echo WebSocket Client server\\")

  def on_message(self, ws, message):
      self.handle_message(message)

  def on_error(self, ws, error):
      print(\\"WebSocket Error:\\", error)
      self.handle_error(error)

  def on_close(self, ws, close_status_code, close_msg):
      print(\\"Disconnected from Hoppscotch Echo WebSocket Client\\", close_status_code, close_msg)

  def connect(self):
      \\"\\"\\"Establish the connection and start the run_forever loop in a background thread.\\"\\"\\"
      ssl_opts = {\\"ca_certs\\": certifi.where()}
      self.ws_app = websocket.WebSocketApp(
          self.url,
          on_open=self.on_open,
          on_message=self.on_message,
          on_error=self.on_error,
          on_close=self.on_close
      )
      # Run the WebSocketApp's run_forever in a separate thread with multithreading enabled.
      def run():

          retry = 0
          max_retries = 5
        
          while not self._stop_event.is_set() and retry < max_retries:
              try:
                  retry += 1
                  print(\\"Starting WebSocket thread...\\")
                  self.ws_app.run_forever(sslopt=ssl_opts)
              except Exception as e:
                  print(f\\"Exception in WebSocket thread: {e}\\")  # Print full error details

      thread = threading.Thread(target=run, daemon=True)
      thread.start()

  def register_message_handler(self, handler) :
    \\"\\"\\"Register a callable to process incoming messages.\\"\\"\\"
    if callable(handler):
      self.message_handlers.append(handler)
    else:
        print(\\"Message handler must be callable\\")


  def register_error_handler(self, handler):
      \\"\\"\\"Register a callable to process errors.\\"\\"\\"
      if callable(handler):
          self.error_handlers.append(handler)
      else:
          print(\\"Error handler must be callable\\")

  def register_outgoing_processor(self, processor):
      \\"\\"\\"
      Register a callable that processes outgoing messages automatically.
      These processors run in sequence before each message is sent.
      \\"\\"\\"
      if callable(processor):
          self.outgoing_processors.append(processor)
      else:
          print(\\"Outgoing processor must be callable\\")

  def handle_message(self, message):
      \\"\\"\\"Pass the incoming message to all registered message handlers. \\"\\"\\"
      if len(self.message_handlers) == 0:
        print(\\"\\\\033[94mReceived raw message:\\\\033[0m\\", message)
      else:
        for handler in self.message_handlers:
          handler(message)

  def handle_error(self, error):
      \\"\\"\\"Pass the error to all registered error handlers. Generic log message is printed if no handlers are registered.\\"\\"\\"
      if len(self.error_handlers) == 0:
        print(\\"\\\\033[91mError occurred:\\\\033[0m\\", error)
      else:
        # Call custom error handlers
        for handler in self.error_handlers:
          handler(error)

  async def send_echo_message(self, message):
      \\"\\"\\"
      Send a send_echo_message message using the WebSocket connection attached to this instance.

      Args:
          message (dict or str): The message to send. Will be serialized to JSON if it's a dictionary.

      Raises:
          Exception: If sending fails or the socket is not connected.
      \\"\\"\\"
      await self._send(message, self.ws_app)

  @staticmethod
  async def send_echo_message_static(message, socket):
      \\"\\"\\"
      Send a send_echo_message message using a provided WebSocket connection, without needing an instance.

      Args:
          message (dict or str): The message to send.
          socket (websockets.WebSocketCommonProtocol): The WebSocket to send through.

      Raises:
          Exception: If sending fails or the socket is not connected.
      \\"\\"\\"
      await HoppscotchEchoWebSocketClient._send(message, socket)


  @staticmethod
  async def _send(message, socket):
      \\"\\"\\"
      Internal helper to handle the actual sending logic.

      Args:
          message (dict or str): The message to send.
          socket (websockets.WebSocketCommonProtocol): The WebSocket to send through.

      Notes:
          If message is a dictionary, it will be automatically converted to JSON.
      \\"\\"\\"
      try:
          if isinstance(message, dict):
              message = json.dumps(message)
          await socket.send(message)
      except Exception as e:
          print(\\"Error sending:\\", e)

  def close(self) :
    \\"\\"\\"Cleanly close the WebSocket connection.\\"\\"\\"
    self._stop_event.set()
    if self.ws_app:
        self.ws_app.close()
        print(\\"WebSocket connection closed.\\")


"
`;

exports[`WebSocket Clients Integration Tests Python Client Common Integration tests for Python client generation generate simple client for hoppscotch echo: requirements.txt 1`] = `
"websocket-client==1.8.0
certifi==2025.1.31
requests==2.32.3
"
`;

exports[`WebSocket Clients Integration Tests Python Client Common Integration tests for Python client generation generate simple client for postman echo: client.py 1`] = `
"##################################################
#
# Postman Echo WebSocket Client - 1.0.0
# Protocol: wss
# Host: ws.postman-echo.com
# Path: /raw
#
##################################################

import json
import certifi
import threading
import websocket

class PostmanEchoWebSocketClientClient:

  def __init__(self, url: str = \\"wss://ws.postman-echo.com/raw\\"):

        \\"\\"\\"
        Constructor to initialize the WebSocket client.

        Args:
            url (str, optional): The WebSocket server URL. Use it if the server URL is 
            different from the default one taken from the AsyncAPI document.
        \\"\\"\\"
        self.ws_app = None  # Instance of WebSocketApp
        self.message_handlers = []      # Callables for incoming messages
        self.error_handlers = []        # Callables for errors
        self.outgoing_processors = []   # Callables to process outgoing messages
        self._stop_event = threading.Event()
      
      

        
        self.url = url

  def on_open(self, ws):
      print(\\"Connected to Postman Echo WebSocket Client server\\")

  def on_message(self, ws, message):
      self.handle_message(message)

  def on_error(self, ws, error):
      print(\\"WebSocket Error:\\", error)
      self.handle_error(error)

  def on_close(self, ws, close_status_code, close_msg):
      print(\\"Disconnected from Postman Echo WebSocket Client\\", close_status_code, close_msg)

  def connect(self):
      \\"\\"\\"Establish the connection and start the run_forever loop in a background thread.\\"\\"\\"
      ssl_opts = {\\"ca_certs\\": certifi.where()}
      self.ws_app = websocket.WebSocketApp(
          self.url,
          on_open=self.on_open,
          on_message=self.on_message,
          on_error=self.on_error,
          on_close=self.on_close
      )
      # Run the WebSocketApp's run_forever in a separate thread with multithreading enabled.
      def run():

          retry = 0
          max_retries = 5
        
          while not self._stop_event.is_set() and retry < max_retries:
              try:
                  retry += 1
                  print(\\"Starting WebSocket thread...\\")
                  self.ws_app.run_forever(sslopt=ssl_opts)
              except Exception as e:
                  print(f\\"Exception in WebSocket thread: {e}\\")  # Print full error details

      thread = threading.Thread(target=run, daemon=True)
      thread.start()

  def register_message_handler(self, handler) :
    \\"\\"\\"Register a callable to process incoming messages.\\"\\"\\"
    if callable(handler):
      self.message_handlers.append(handler)
    else:
        print(\\"Message handler must be callable\\")


  def register_error_handler(self, handler):
      \\"\\"\\"Register a callable to process errors.\\"\\"\\"
      if callable(handler):
          self.error_handlers.append(handler)
      else:
          print(\\"Error handler must be callable\\")

  def register_outgoing_processor(self, processor):
      \\"\\"\\"
      Register a callable that processes outgoing messages automatically.
      These processors run in sequence before each message is sent.
      \\"\\"\\"
      if callable(processor):
          self.outgoing_processors.append(processor)
      else:
          print(\\"Outgoing processor must be callable\\")

  def handle_message(self, message):
      \\"\\"\\"Pass the incoming message to all registered message handlers. \\"\\"\\"
      if len(self.message_handlers) == 0:
        print(\\"\\\\033[94mReceived raw message:\\\\033[0m\\", message)
      else:
        for handler in self.message_handlers:
          handler(message)

  def handle_error(self, error):
      \\"\\"\\"Pass the error to all registered error handlers. Generic log message is printed if no handlers are registered.\\"\\"\\"
      if len(self.error_handlers) == 0:
        print(\\"\\\\033[91mError occurred:\\\\033[0m\\", error)
      else:
        # Call custom error handlers
        for handler in self.error_handlers:
          handler(error)

  async def send_echo_message(self, message):
      \\"\\"\\"
      Send a send_echo_message message using the WebSocket connection attached to this instance.

      Args:
          message (dict or str): The message to send. Will be serialized to JSON if it's a dictionary.

      Raises:
          Exception: If sending fails or the socket is not connected.
      \\"\\"\\"
      await self._send(message, self.ws_app)

  @staticmethod
  async def send_echo_message_static(message, socket):
      \\"\\"\\"
      Send a send_echo_message message using a provided WebSocket connection, without needing an instance.

      Args:
          message (dict or str): The message to send.
          socket (websockets.WebSocketCommonProtocol): The WebSocket to send through.

      Raises:
          Exception: If sending fails or the socket is not connected.
      \\"\\"\\"
      await PostmanEchoWebSocketClientClient._send(message, socket)


  @staticmethod
  async def _send(message, socket):
      \\"\\"\\"
      Internal helper to handle the actual sending logic.

      Args:
          message (dict or str): The message to send.
          socket (websockets.WebSocketCommonProtocol): The WebSocket to send through.

      Notes:
          If message is a dictionary, it will be automatically converted to JSON.
      \\"\\"\\"
      try:
          if isinstance(message, dict):
              message = json.dumps(message)
          await socket.send(message)
      except Exception as e:
          print(\\"Error sending:\\", e)

  def close(self) :
    \\"\\"\\"Cleanly close the WebSocket connection.\\"\\"\\"
    self._stop_event.set()
    if self.ws_app:
        self.ws_app.close()
        print(\\"WebSocket connection closed.\\")


"
`;

exports[`WebSocket Clients Integration Tests Python Client Common Integration tests for Python client generation generate simple client for postman echo: requirements.txt 1`] = `
"websocket-client==1.8.0
certifi==2025.1.31
requests==2.32.3
"
`;
