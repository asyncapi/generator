# It does magic only if there is a package.json file in the root of the project
name: Release

on:
  push:
    branches:
      - master
        # The below lines are not enough to have release supported for these branches
      - next-spec
      - next-major
      - next-major-spec
      - beta
      - alpha
      - next

jobs:
  test-nodejs:
    # We just check the message of the first commit as there is always just one commit because we squash into one before merging
    # "commits" contains an array of objects where one of the properties is the commit "message"
    # Release workflow will be skipped if release conventional commits are not used
    if: |
      startsWith( github.repository, 'asyncapi/' ) &&
      (startsWith( github.event.commits[0].message , 'fix:' ) ||
      startsWith( github.event.commits[0].message, 'fix!:' ) ||
      startsWith( github.event.commits[0].message, 'feat:' ) ||
      startsWith( github.event.commits[0].message, 'chore(release):' ) ||
      startsWith( github.event.commits[0].message, 'feat!:' ))
    name: Test NodeJS release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Using macos-13 instead of latest (macos-14) due to an issue with Puppeteer and such runner.
        # See: https://github.com/puppeteer/puppeteer/issues/12327 and https://github.com/asyncapi/parser-js/issues/1001
        os: [ubuntu-latest, macos-13, windows-latest]
    steps:
      - name: Set git to use LF # To once and for all finish the never-ending fight between Unix and Windows
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        shell: bash
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check if Node.js project and has package.json
        id: packagejson
        run: test -e ./package.json && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT
        shell: bash
      - if: steps.packagejson.outputs.exists == 'true'
        name: Check package-lock version
        uses: asyncapi/.github/.github/actions/get-node-version-from-package-lock@master
        id: lockversion
      - if: steps.packagejson.outputs.exists == 'true'
        name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.lockversion.outputs.version }}"
      - if: steps.lockversion.outputs.version == '18' && matrix.os == 'windows-latest'
        name: Install npm cli 8
        shell: bash
        # npm cli 10 is buggy because of some cache issues
        run: npm install -g npm@8.19.4
      - if: steps.packagejson.outputs.exists == 'true'
        name: Install dependencies
        shell: bash
        run: npm ci
      - if: steps.packagejson.outputs.exists == 'true'
        name: Run test
        run: npm test --if-present
      - if: failure() # Only, on failure, send a message on the 94_bot-failing-ci slack channel
        name: Report workflow run status to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,action,workflow
          text: "Release workflow failed in testing job"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CI_FAIL_NOTIFY }}

  release:
    needs: [test-nodejs]
    name: Publish to any of NPM, GitHub, or Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Set git to use LF # To once and for all finish the never-ending fight between Unix and Windows
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check if Node.js project and has package.json
        id: packagejson
        run: test -e ./package.json && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT
        shell: bash
      - if: steps.packagejson.outputs.exists == 'true'
        name: Check package-lock version
        uses: asyncapi/.github/.github/actions/get-node-version-from-package-lock@master
        id: lockversion
      - if: steps.packagejson.outputs.exists == 'true'
        name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.lockversion.outputs.version }}"
      - if: steps.packagejson.outputs.exists == 'true'
        name: Install dependencies
        shell: bash
        run: npm ci
      - if: steps.packagejson.outputs.exists == 'true'
        name: Install changelog
        shell: bash
        # This step can be removed once the issue is fixed in the changeset package.
        run: npm install @changesets/changelog-git@0.2.0
      - if: steps.packagejson.outputs.exists == 'true'
        name: Publish to any of NPM, Github, and Docker Hub
        #this step has 2 goals, it is either identifying that there is changeset file created and then this action creates a PR with version bump that will trigger release - or if it sees there is no changeset, and there are versions changes in package.json files, it publish new versions to NPM is they are not there yet
        uses: changesets/action@v1
        id: release
        with:
          version: npx -p @changesets/cli@2.27.7 changeset version
          commit: "chore(release): release and bump versions of packages"
          title: "chore(release): release and bump versions of packages"
          publish: npx -p @changesets/cli@2.27.7 changeset publish
          setupGitUser: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GIT_AUTHOR_NAME: asyncapi-bot
          GIT_AUTHOR_EMAIL: info@asyncapi.io
          GIT_COMMITTER_NAME: asyncapi-bot
          GIT_COMMITTER_EMAIL: info@asyncapi.io
      - if: failure() # Only, on failure, send a message on the 94_bot-failing-ci Slack channel
        name: Report workflow run status to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,action,workflow
          text: "Release workflow failed in release job"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CI_FAIL_NOTIFY }}
