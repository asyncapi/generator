{"version":3,"file":"models.js","sources":["../../../../../components/src/components/models.js","../template/models.js"],"sourcesContent":["import { File } from '@asyncapi/generator-react-sdk';\nimport { AsyncAPIDocumentInterface } from '@asyncapi/parser';\nimport {\n  PythonGenerator,\n  JavaGenerator,\n  TypeScriptGenerator,\n  CSharpGenerator,\n  RustGenerator,\n  FormatHelpers\n} from '@asyncapi/modelina';\n\n/**\n * @typedef {'toPascalCase' | 'toCamelCase' | 'toKebabCase' | 'toSnakeCase'} Format\n * Represents the available format helpers for naming files.\n */\n\n/**\n * @typedef {'python' | 'java' | 'typescript' | 'rust' | 'csharp'} Language\n * Represents the available programming languages for model generation.\n */\n\n/**\n * Mapping of language strings to Modelina generator classes and file extensions.\n * @type {Record<string, { generator: new (options?: object) => any; extension: string }>}\n */\nconst generatorConfig = {\n  python: { generator: PythonGenerator, extension: 'py' },\n  java: { generator: JavaGenerator, extension: 'java' },\n  typescript: { generator: TypeScriptGenerator, extension: 'ts' },\n  rust: { generator: RustGenerator, extension: 'rs' },\n  csharp: { generator: CSharpGenerator, extension: 'cs' },\n};\n\n/**\n * Mapping of available format functions.\n */\nconst formatHelpers = {\n  toPascalCase: FormatHelpers.toPascalCase,\n  toCamelCase: FormatHelpers.toCamelCase,\n  toKebabCase: FormatHelpers.toKebabCase,\n  toSnakeCase: FormatHelpers.toSnakeCase,\n  // Add more formats as needed\n};\n\n/**\n * Generates and returns an array of model files based on the AsyncAPI document.\n * \n * @param {Object} params - The parameters for the function.\n * @param {AsyncAPIDocumentInterface} params.asyncapi - Parsed AsyncAPI document object.\n * @param {Language} [params.language='python'] - Target programming language for the generated models.\n * @param {Format} [params.format='toPascalCase'] - Naming format for generated files.\n * @param {object} [params.presets={}] - Custom presets for the generator instance.\n * @param {object} [params.constraints={}] - Custom constraints for the generator instance.\n * \n * @returns {Array<File>} Array of File components with generated model content.\n */\nexport async function Models({ asyncapi, language = 'python', format = 'toPascalCase', presets, constraints }) {\n  // Get the selected generator and file extension, defaulting to Python if unknown\n  const { generator: GeneratorClass, extension } = generatorConfig[language] || generatorConfig.python;\n\n  // Create the generator instance with presets and constraints\n  const generator = (presets || constraints) \n  ? new GeneratorClass({ ...(presets && { presets }), ...(constraints && { constraints }) })\n  : new GeneratorClass();\n\n  // Get the format helper function, defaulting to toPascalCase if unknown\n  const formatHelper = formatHelpers[format] || formatHelpers.toPascalCase;\n\n  // Generate models asynchronously\n  const models = await generator.generate(asyncapi);\n\n  return models.map(model => {\n    const modelFileName = `${formatHelper(model.modelName)}.${extension}`;\n    return <File name={modelFileName}>{model.result}</File>;\n  });\n}","import { Models } from '../../../../../components/src/index';\n//import { Models } from '@asyncapi/generator-components';\n\nexport default async function({ asyncapi }) {\n  return await Models({asyncapi, language: 'csharp'})\n}"],"names":["generatorConfig","python","generator","PythonGenerator","extension","java","JavaGenerator","typescript","TypeScriptGenerator","rust","RustGenerator","csharp","CSharpGenerator","formatHelpers","toPascalCase","FormatHelpers","toCamelCase","toKebabCase","toSnakeCase","Models","asyncapi","language","format","presets","constraints","GeneratorClass","formatHelper","models","generate","map","model","modelFileName","modelName","_jsx","File","name","children","result"],"mappings":";;;;;;;;AAyBA,MAAMA,eAAe,GAAG;AACtBC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,SAAS,EAAEC,wBAAe;AAAEC,IAAAA,SAAS,EAAE,IAAA;GAAM;AACvDC,EAAAA,IAAI,EAAE;AAAEH,IAAAA,SAAS,EAAEI,sBAAa;AAAEF,IAAAA,SAAS,EAAE,MAAA;GAAQ;AACrDG,EAAAA,UAAU,EAAE;AAAEL,IAAAA,SAAS,EAAEM,4BAAmB;AAAEJ,IAAAA,SAAS,EAAE,IAAA;GAAM;AAC/DK,EAAAA,IAAI,EAAE;AAAEP,IAAAA,SAAS,EAAEQ,sBAAa;AAAEN,IAAAA,SAAS,EAAE,IAAA;GAAM;AACnDO,EAAAA,MAAM,EAAE;AAAET,IAAAA,SAAS,EAAEU,wBAAe;AAAER,IAAAA,SAAS,EAAE,IAAA;AAAK,GAAA;AACxD,CAAC,CAAA;;AAED;AACA;AACA;AACA,MAAMS,aAAa,GAAG;EACpBC,YAAY,EAAEC,sBAAa,CAACD,YAAY;EACxCE,WAAW,EAAED,sBAAa,CAACC,WAAW;EACtCC,WAAW,EAAEF,sBAAa,CAACE,WAAW;EACtCC,WAAW,EAAEH,sBAAa,CAACG,WAAAA;AAC3B;AACF,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeC,MAAMA,CAAC;EAAEC,QAAQ;AAAEC,EAAAA,QAAQ,GAAG,QAAQ;AAAEC,EAAAA,MAAM,GAAG,cAAc;EAAEC,OAAO;AAAEC,EAAAA,WAAAA;AAAY,CAAC,EAAE;AAC7G;EACA,MAAM;AAAEtB,IAAAA,SAAS,EAAEuB,cAAc;AAAErB,IAAAA,SAAAA;GAAW,GAAGJ,eAAe,CAACqB,QAAQ,CAAC,IAAIrB,eAAe,CAACC,MAAM,CAAA;;AAEpG;EACA,MAAMC,SAAS,GAAIqB,OAAO,IAAIC,WAAW,GACvC,IAAIC,cAAc,CAAC;AAAE,IAAA,IAAIF,OAAO,IAAI;AAAEA,MAAAA,OAAAA;AAAQ,KAAC,CAAC;AAAE,IAAA,IAAIC,WAAW,IAAI;AAAEA,MAAAA,WAAAA;KAAa,CAAA;AAAE,GAAC,CAAC,GACxF,IAAIC,cAAc,EAAE,CAAA;;AAEtB;EACA,MAAMC,YAAY,GAAGb,aAAa,CAACS,MAAM,CAAC,IAAIT,aAAa,CAACC,YAAY,CAAA;;AAExE;EACA,MAAMa,MAAM,GAAG,MAAMzB,SAAS,CAAC0B,QAAQ,CAACR,QAAQ,CAAC,CAAA;AAEjD,EAAA,OAAOO,MAAM,CAACE,GAAG,CAACC,KAAK,IAAI;IACzB,MAAMC,aAAa,GAAG,CAAA,EAAGL,YAAY,CAACI,KAAK,CAACE,SAAS,CAAC,CAAI5B,CAAAA,EAAAA,SAAS,CAAE,CAAA,CAAA;IACrE,oBAAO6B,cAAA,CAACC,sBAAI,EAAA;AAACC,MAAAA,IAAI,EAAEJ,aAAc;MAAAK,QAAA,EAAEN,KAAK,CAACO,MAAAA;AAAM,KAAO,CAAC,CAAA;AACzD,GAAC,CAAC,CAAA;AACJ;;AC1EA;;AAEe,qBAAe,EAAA;AAAEjB,EAAAA,QAAAA;AAAS,CAAC,EAAE;EAC1C,OAAO,MAAMD,MAAM,CAAC;IAACC,QAAQ;AAAEC,IAAAA,QAAQ,EAAE,QAAA;AAAQ,GAAC,CAAC,CAAA;AACrD;;;;"}