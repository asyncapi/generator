// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing if generated client match snapshot generate simple client for hoppscotch echo 1`] = `
"//////////////////////////////////////////////////////////////////////
//
// Hoppscotch Echo WebSocket Client - 1.0.0
// Protocol: wss
// Host: echo-websocket.hoppscotch.io
//
//////////////////////////////////////////////////////////////////////

const WebSocket = require('ws');

class HoppscotchEchoWebSocketClient {

  /*
    * Constructor to initialize the WebSocket client
    * @param {string} url - The WebSocket server URL. Use it if the server URL is different from the default one taken from the AsyncAPI document.
  */
  constructor(url) {
    this.url = url || 'wss://echo-websocket.hoppscotch.io';
    this.websocket = null;
    this.messageHandlers = [];
    this.errorHandlers = [];
  }

  // Method to establish a WebSocket connection
  connect() {
    return new Promise((resolve, reject) => {
      this.websocket = new WebSocket(this.url);

      // On successful connection
      this.websocket.onopen = () => {
        console.log('Connected to Hoppscotch Echo WebSocket Client server');
        resolve();
      };

      // On receiving a message
      this.websocket.onmessage = (event) => {
        if (this.messageHandlers.length > 0) {
          // Call custom message handlers
          this.messageHandlers.forEach(handler => {
            if (typeof handler === 'function') {
              this.handleMessage(event.data, handler);
            }
          });
        } else {
          // Default message logging
          console.log('Message received:', event.data);
        }
      };

      // On error first call custom error handlers, then default error behavior
      this.websocket.onerror = (error) => {
        if (this.errorHandlers.length > 0) {
          // Call custom error handlers
          this.errorHandlers.forEach(handler => handler(error));
        } else {
          // Default error behavior
          console.error('WebSocket Error:', error);
        }
        reject(error);
      };

      // On connection close
      this.websocket.onclose = () => {
        console.log('Disconnected from Hoppscotch Echo WebSocket Client server');
      };
    });
  }

  // Method to register custom message handlers
  registerMessageHandler(handler) {
    if (typeof handler === 'function') {
      this.messageHandlers.push(handler);
    } else {
      console.warn('Message handler must be a function');
    }
  }

  // Method to register custom error handlers
  registerErrorHandler(handler) {
    if (typeof handler === 'function') {
      this.errorHandlers.push(handler);
    } else {
      console.warn('Error handler must be a function');
    }
  }

  // Method to handle message with callback
  handleMessage(message, cb) {
    if (cb) cb(message);
  }

  /**
   * Sends a sendEchoMessage message over the WebSocket connection.
   * 
   * @param {Object} message - The message payload to send. Should match the schema defined in the AsyncAPI document.
   * @param {WebSocket} [socket] - The WebSocket connection to use. If not provided, the client's own connection will be used.
   * @throws {TypeError} If message cannot be stringified to JSON
   * @throws {Error} If WebSocket connection is not in OPEN state
   */
  static sendEchoMessage(message, socket) {
    try {
      socket.send(JSON.stringify(message));
    } catch (error) {
      console.error('Error sending sendEchoMessage message:', error);
    }
  }
  /**
   * Instance method version of sendEchoMessage that uses the client's own WebSocket connection.
   * @param {Object} message - The message payload to send
   * @throws {Error} If WebSocket connection is not established
   */
  sendEchoMessage(message){
    if(!this.websocket){
      throw new Error('WebSocket connection not established. Call connect() first.');
    }
    HoppscotchEchoWebSocketClient.sendEchoMessage(message, this.websocket);
  }
  

  // Method to close the WebSocket connection
  close() {
    if (this.websocket) {
      this.websocket.close();
      console.log('WebSocket connection closed.');
    }
  }
}
module.exports = HoppscotchEchoWebSocketClient;

"
`;

exports[`testing if generated client match snapshot generate simple client for hoppscotch echo with custom client name 1`] = `
"//////////////////////////////////////////////////////////////////////
//
// Hoppscotch Echo WebSocket Client - 1.0.0
// Protocol: wss
// Host: echo-websocket.hoppscotch.io
//
//////////////////////////////////////////////////////////////////////

const WebSocket = require('ws');

class HoppscotchClient {

  /*
    * Constructor to initialize the WebSocket client
    * @param {string} url - The WebSocket server URL. Use it if the server URL is different from the default one taken from the AsyncAPI document.
  */
  constructor(url) {
    this.url = url || 'wss://echo-websocket.hoppscotch.io';
    this.websocket = null;
    this.messageHandlers = [];
    this.errorHandlers = [];
  }

  // Method to establish a WebSocket connection
  connect() {
    return new Promise((resolve, reject) => {
      this.websocket = new WebSocket(this.url);

      // On successful connection
      this.websocket.onopen = () => {
        console.log('Connected to Hoppscotch Echo WebSocket Client server');
        resolve();
      };

      // On receiving a message
      this.websocket.onmessage = (event) => {
        if (this.messageHandlers.length > 0) {
          // Call custom message handlers
          this.messageHandlers.forEach(handler => {
            if (typeof handler === 'function') {
              this.handleMessage(event.data, handler);
            }
          });
        } else {
          // Default message logging
          console.log('Message received:', event.data);
        }
      };

      // On error first call custom error handlers, then default error behavior
      this.websocket.onerror = (error) => {
        if (this.errorHandlers.length > 0) {
          // Call custom error handlers
          this.errorHandlers.forEach(handler => handler(error));
        } else {
          // Default error behavior
          console.error('WebSocket Error:', error);
        }
        reject(error);
      };

      // On connection close
      this.websocket.onclose = () => {
        console.log('Disconnected from Hoppscotch Echo WebSocket Client server');
      };
    });
  }

  // Method to register custom message handlers
  registerMessageHandler(handler) {
    if (typeof handler === 'function') {
      this.messageHandlers.push(handler);
    } else {
      console.warn('Message handler must be a function');
    }
  }

  // Method to register custom error handlers
  registerErrorHandler(handler) {
    if (typeof handler === 'function') {
      this.errorHandlers.push(handler);
    } else {
      console.warn('Error handler must be a function');
    }
  }

  // Method to handle message with callback
  handleMessage(message, cb) {
    if (cb) cb(message);
  }

  /**
   * Sends a sendEchoMessage message over the WebSocket connection.
   * 
   * @param {Object} message - The message payload to send. Should match the schema defined in the AsyncAPI document.
   * @param {WebSocket} [socket] - The WebSocket connection to use. If not provided, the client's own connection will be used.
   * @throws {TypeError} If message cannot be stringified to JSON
   * @throws {Error} If WebSocket connection is not in OPEN state
   */
  static sendEchoMessage(message, socket) {
    try {
      socket.send(JSON.stringify(message));
    } catch (error) {
      console.error('Error sending sendEchoMessage message:', error);
    }
  }
  /**
   * Instance method version of sendEchoMessage that uses the client's own WebSocket connection.
   * @param {Object} message - The message payload to send
   * @throws {Error} If WebSocket connection is not established
   */
  sendEchoMessage(message){
    if(!this.websocket){
      throw new Error('WebSocket connection not established. Call connect() first.');
    }
    HoppscotchClient.sendEchoMessage(message, this.websocket);
  }
  

  // Method to close the WebSocket connection
  close() {
    if (this.websocket) {
      this.websocket.close();
      console.log('WebSocket connection closed.');
    }
  }
}
module.exports = HoppscotchClient;

"
`;

exports[`testing if generated client match snapshot generate simple client for postman echo 1`] = `
"//////////////////////////////////////////////////////////////////////
//
// Postman Echo WebSocket Client - 1.0.0
// Protocol: wss
// Host: ws.postman-echo.com
// Path: /raw
//
//////////////////////////////////////////////////////////////////////

const WebSocket = require('ws');

class PostmanEchoWebSocketClientClient {

  /*
    * Constructor to initialize the WebSocket client
    * @param {string} url - The WebSocket server URL. Use it if the server URL is different from the default one taken from the AsyncAPI document.
  */
  constructor(url) {
    this.url = url || 'wss://ws.postman-echo.com/raw';
    this.websocket = null;
    this.messageHandlers = [];
    this.errorHandlers = [];
  }

  // Method to establish a WebSocket connection
  connect() {
    return new Promise((resolve, reject) => {
      this.websocket = new WebSocket(this.url);

      // On successful connection
      this.websocket.onopen = () => {
        console.log('Connected to Postman Echo WebSocket Client server');
        resolve();
      };

      // On receiving a message
      this.websocket.onmessage = (event) => {
        if (this.messageHandlers.length > 0) {
          // Call custom message handlers
          this.messageHandlers.forEach(handler => {
            if (typeof handler === 'function') {
              this.handleMessage(event.data, handler);
            }
          });
        } else {
          // Default message logging
          console.log('Message received:', event.data);
        }
      };

      // On error first call custom error handlers, then default error behavior
      this.websocket.onerror = (error) => {
        if (this.errorHandlers.length > 0) {
          // Call custom error handlers
          this.errorHandlers.forEach(handler => handler(error));
        } else {
          // Default error behavior
          console.error('WebSocket Error:', error);
        }
        reject(error);
      };

      // On connection close
      this.websocket.onclose = () => {
        console.log('Disconnected from Postman Echo WebSocket Client server');
      };
    });
  }

  // Method to register custom message handlers
  registerMessageHandler(handler) {
    if (typeof handler === 'function') {
      this.messageHandlers.push(handler);
    } else {
      console.warn('Message handler must be a function');
    }
  }

  // Method to register custom error handlers
  registerErrorHandler(handler) {
    if (typeof handler === 'function') {
      this.errorHandlers.push(handler);
    } else {
      console.warn('Error handler must be a function');
    }
  }

  // Method to handle message with callback
  handleMessage(message, cb) {
    if (cb) cb(message);
  }

  /**
   * Sends a sendEchoMessage message over the WebSocket connection.
   * 
   * @param {Object} message - The message payload to send. Should match the schema defined in the AsyncAPI document.
   * @param {WebSocket} [socket] - The WebSocket connection to use. If not provided, the client's own connection will be used.
   * @throws {TypeError} If message cannot be stringified to JSON
   * @throws {Error} If WebSocket connection is not in OPEN state
   */
  static sendEchoMessage(message, socket) {
    try {
      socket.send(JSON.stringify(message));
    } catch (error) {
      console.error('Error sending sendEchoMessage message:', error);
    }
  }
  /**
   * Instance method version of sendEchoMessage that uses the client's own WebSocket connection.
   * @param {Object} message - The message payload to send
   * @throws {Error} If WebSocket connection is not established
   */
  sendEchoMessage(message){
    if(!this.websocket){
      throw new Error('WebSocket connection not established. Call connect() first.');
    }
    PostmanEchoWebSocketClientClient.sendEchoMessage(message, this.websocket);
  }
  

  // Method to close the WebSocket connection
  close() {
    if (this.websocket) {
      this.websocket.close();
      console.log('WebSocket connection closed.');
    }
  }
}
module.exports = PostmanEchoWebSocketClientClient;

"
`;
