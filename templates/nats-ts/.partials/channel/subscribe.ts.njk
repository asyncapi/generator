
{% macro subscribe(channelName, subscribeOperation, payload, encoding) %}
export function subscribe(onDataCallback : (err?: NatsError, msg?: {{subscribeOperation.message(0).name() | camelCase}}) => void, nc?: Client): Promise<Subscription> {
  return new Promise(async (resolve, reject) => {
    if (nc) {
      try{
        let subscribeOptions: SubscriptionOptions = {};
        {%- if subscribeOperation.bindings().queue() | length %}
        //If queue
        subscribeOptions.queue = '{{subscribeOperation.bindings().queue().name()}}';
        {%- endif %}
        {%- if subscribeOperation.bindings().unsubAfter() | length %}
        //If unsubafter
        subscribeOptions.max = {{subscribeOperation.bindings().unsubAfter()}};
        {%- endif %}

        let subscription = nc.subscribe('{{channelName}}', (err, msg) => {
          if(err){
            onDataCallback(err);
          }else{
            let processedData = utils.processRecievedData(msg.data, Payload.{{payload}}, '{{encoding}}');
            let publishedData = new {{subscribeOperation.message(0).name() | camelCase}}();
            publishedData.copyFrom(processedData);
            onDataCallback(undefined, publishedData);
          }
        }, subscribeOptions);
        resolve(subscription);
      }catch(e){
        reject(e);
      }
    }else{
      reject(new Error("Nats client is not connected"));
    }
  })
}

{% endmacro %}
