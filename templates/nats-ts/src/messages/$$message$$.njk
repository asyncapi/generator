
{% macro initProperties(schema) %}
  {%- if schema.allOf() | length > 0 %}
    {%- for allOfSchema in schema.allOf() %}
    {{ allOfSchema.uid() | camelcase }}:{{ allOfSchema.uid() }}
    {%- endfor %}
  {%- endif %}
  {%- if schema.oneOf() | length > 0 %}
    test:{{schema.oneOf() | oneOfSchemaType}}
  {%- endif %}

  {%- if schema.properties() | length > 0 %}
    {%- for propertyName, property in schema.properties() %}
    {{ initProperties(property) }}
    {%- endfor %}
  {%- endif %}



  {%- if message.anyOf() | length > 0 %}
    {%- for schema in message.anyOf() %}
    {{ schema.uid }}?:{{ schema.uid() }}
    {%- endfor %}
  {%- endif %}


  {%- if ! schema.uid() | length %}
    {{ schema.uid() | camelcase }}:{{ schema.uid() }}
  {%- endif %}
{% endmacro %}
export default class {{ message.uid() }} {
    {{ initProperties(message.payload()) }}

    constructor();
    constructor(
        {% set counter = 0 %}
        {%- for propertyName, property in message.payload().properties() %}
        {%- if property.required()%}
        {{ propertyName }}?:{{ property.type() }}
        {%- endif %}
        {%- endfor %}
        ) {
        {%- for propertyName, property in message.payload().properties() %}
        {%- if property.required()%}
        this.{{ propertyName }}={{ propertyName }};
        {%- endif %}
        {%- endfor %}
    }

    copyInto(jsonString: any){
        {%- for propertyName, property in message.payload().properties() %}
        this.{{ propertyName }}=jsonString.{{ propertyName }};
        {%- endfor %}
    }
}
