// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing if generated client match snapshot generate simple client 1`] = `
"//////////////////////////////////////////////////////////////////////
//
// Hoppscotch Echo WebSocket - 1.0.0
// Protocol: wss
// Host: wss://echo-websocket.hoppscotch.io
//
//////////////////////////////////////////////////////////////////////

const WebSocket = require('ws');

class HoppscotchEchoWebSocketClient {
  constructor() {
    this.url = 'wss://echo-websocket.hoppscotch.io';
    this.websocket = null;
    this.messageHandlers = [];
  }

  // Method to establish a WebSocket connection
  connect() {
    return new Promise((resolve, reject) => {
      this.websocket = new WebSocket(this.url);

      // On successful connection
      this.websocket.onopen = () => {
        console.log('Connected to Hoppscotch Echo WebSocket server');
        resolve();
      };

      // On receiving a message
      this.websocket.onmessage = (event) => {
        console.log('Message received:', event.data);

        this.messageHandlers.forEach(handler => {
          if (typeof handler === 'function') {
            this.handleMessage(event.data, handler);
          }
        });
      };

      // On error
      this.websocket.onerror = (error) => {
        console.error('WebSocket Error:', error);
        reject(error);
      };

      // On connection close
      this.websocket.onclose = () => {
        console.log('Disconnected from Hoppscotch Echo WebSocket server');
      };
    });
  }

  registerMessageHandler(handler) {
    this.messageHandlers.push(handler);
  }

  // Method to handle message with callback
  handleMessage(message, cb) {
    if (cb) cb(message);
  }

  // Method to send an echo message to the server
  sendEchoMessage(message) {
    this.websocket.send(JSON.stringify(message));
    console.log('Sent message to echo server:', message);
  }

  // Method to close the WebSocket connection
  close() {
    if (this.websocket) {
      this.websocket.close();
      console.log('WebSocket connection closed.');
    }
  }
}

module.exports = HoppscotchEchoWebSocketClient;
"
`;
